<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JPB.DataAccess</name>
    </assembly>
    <members>
        <member name="T:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.IDatabase" />
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Debugger">
            <summary>
                If enabled each query will be decompiled and the LastInsertedQuery property will be set
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Create(JPB.DataAccess.Contacts.IDatabaseStrategy)">
            <summary>
            Creates the specified strategy.
            </summary>
            <param name="strategy">The strategy.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.OpenAndCloseDatabase">
            <summary>
            Opens the and close database.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Dbcast(System.Data.IDataRecord,System.String,System.Object)">
            <summary>
                Will change the object to DBNull if it is C# null
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Dbcast(System.Object,System.Object)">
            <summary>
                Will change the object to DBNull if it is C# null
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CreatePager``2">
            <summary>
                Get database specific converter Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.LastExecutedQuery">
            <summary>
                Get the last Executed QueryCommand wrapped by a Debugger
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CreatePager``1">
            <summary>
                Get Database specific Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Attach(JPB.DataAccess.Contacts.IDatabaseStrategy)">
            <summary>
                Required
                Is used to attach a Strategy that handles certain kinds of Databases
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Detach">
            <summary>
                Detaches this instance.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.TargetDatabase">
            <summary>
                Defines the Target database we are conneting to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.IsAttached">
            <summary>
                Is this Instance ready to be used
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ConnectionString">
            <summary>
            Get the Current Connection string
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.DatabaseFile">
            <summary>
            If local instance get the file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.DatabaseName">
            <summary>
            Get the Database name that we are connected to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ServerName">
            <summary>
            Get the Server we are Connected to
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetConnection">
            <summary>
            Required
            Is used to create an new Connection based on the Strategy and
            keep it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetTransaction">
            <summary>
            Required
            Is used to create an new Transaction based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetDefaultTransactionLevel">
            <summary>
            Gets the default transaction level.
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Connect(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Required
            When a new Connection is requested this function is used
            </summary>
            <param name="levl"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.TransactionRollback">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CloseConnection">
            <summary>
            Required
            Closing a open Connection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CloseAllConnection">
            <summary>
            Required
            Closing all Connections that maybe open
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CreateCommand(System.String,System.Data.IDataParameter[])">
            <summary>
            Required
            Creates a Command based on the Strategy
            </summary>
            <param name="strSql"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.CreateParameter(System.String,System.Object)">
            <summary>
            Required
            Creates a Parameter based on the Strategy
            </summary>
            <param name="strName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
                Executes a query against the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
                executes the query against the database and wrapps all params by using a counter. First param @0,@1,@n
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetlastInsertedIdCommand">
            <summary>
            Getlasts the inserted identifier command.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">DB2.ExecuteNonQuery: void connection</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
            Formarts a Command to a executable QueryCommand
            </summary>
            <param name="comm"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ConvertParameter(System.Data.DbType)">
            <summary>
            Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetlastInsertedId">
            <summary>
            Required
            Return the last inserted id based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetDataReader(System.String,System.Object[])">
            <summary>
            Gets the data reader for the given Sql Statement.
            </summary>
            <param name="strSql">The SQL.</param>
            <param name="obj">Arguments.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetSkalar(System.Data.IDbCommand)">
            <summary>
            Gets a single Value from the Query
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetSkalar(System.String,System.Object[])">
            <summary>
            Gets a single Value from the Query
            </summary>
            <param name="strSql"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetDataTable(System.String,System.String)">
            <summary>
            Gets the data table.
            </summary>
            <param name="name">The name.</param>
            <param name="strSql">The string SQL.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetDataSet(System.String)">
            <summary>
            Gets the data set.
            </summary>
            <param name="strSql">The string SQL.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetEntitiesList``1(System.String,System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
            Required
            Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strQuery"></param>
            <param name="func"></param>
            <param name="bHandleConnection"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetEntitiesList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Required
            Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Run(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
            Required
            Opens a Connection or reuse an existing one and then execute the action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.Run``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
            Required
            Opens a Connection or reuse an existing one and then execute the action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
                Creates a new Transaction and executes the Action inside it. Then closes the Transaction
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase},System.Data.IsolationLevel)">
            <summary>
            Required
            Opens a Connection or reuse an existing one and then execute the action
            </summary>
            <param name="action"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.RunInTransaction``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
            Required
            Opens a Connection or reuse an existing one and then execute the action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.RunInTransaction``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0},System.Data.IsolationLevel)">
            <summary>
            Runs the in transaction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">The function.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ProcessEntitiesList(System.String,System.Action{System.Data.IDataRecord},System.Boolean)">
            <summary>
            Processes the entities list.
            </summary>
            <param name="strQuery">The string query.</param>
            <param name="action">The action.</param>
            <param name="bHandleConnection">if set to <c>true</c> [b handle connection].</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.TryOnEntitiesList(System.String,System.Action{System.Data.IDataRecord},System.String,System.Boolean)">
            <summary>
            Tries the on entities list.
            </summary>
            <param name="strQuery">The string query.</param>
            <param name="action">The action.</param>
            <param name="strMessageOnEmpty">The string message on empty.</param>
            <param name="bHandleConnection">if set to <c>true</c> [b handle connection].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetEntitiesListWithIndex``1(System.String,System.Func{System.Int64,System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
            Gets the index of the entities list with.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strQuery">The string query.</param>
            <param name="func">The function.</param>
            <param name="bHandleConnection">if set to <c>true</c> [b handle connection].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetEntitiesDictionary``2(System.String,System.Func{System.Data.IDataRecord,System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean,System.String)">
            <summary>
            Gets the entities dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="strQuery">The string query.</param>
            <param name="func">The function.</param>
            <param name="bHandleConnection">if set to <c>true</c> [b handle connection].</param>
            <param name="strExceptionMessage">The string exception message.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetEntitiesDictionary``2(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets the entities dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="cmd">The command.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.GetNextPagingStep``1(System.String,System.Func{System.Data.IDataRecord,``0},System.Int64,``0,System.Boolean,System.String)">
            <summary>
            Gets the next paging step.
            </summary>
            <typeparam name="V"></typeparam>
            <param name="strQuery">The string query.</param>
            <param name="func">The function.</param>
            <param name="iPageSize">Size of the i page.</param>
            <param name="default">The default.</param>
            <param name="bHandleConnection">if set to <c>true</c> [b handle connection].</param>
            <param name="strExceptionMessage">The string exception message.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.DefaultTransactionScope">
            <summary>
            Defines a new Transaction Scope where all changes to a local DB can be Rejected and Reverted
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultTransactionScope.#ctor(JPB.DataAccess.Contacts.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.DefaultTransactionScope"/> class.
            </summary>
            <param name="db">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultTransactionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.EagarDataReader">
            <summary>
            Provides access to the Given object
            </summary>
            <seealso cref="T:JPB.DataAccess.AdoWrapper.EgarDataRecord" />
            <seealso cref="T:System.Data.IDataReader" />
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.#ctor(System.Object,JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.EagarDataReader"/> class.
            </summary>
            <param name="sourceObject">The source object.</param>
            <param name="accessLayer">The access layer.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.#ctor(System.Data.IDataRecord,JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.EagarDataReader" /> class.
            </summary>
            <param name="sourceRecord">The source record.</param>
            <param name="accessLayer">The access layer.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader" /> Object.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.IDataReader" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable" /> that describes the column metadata.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EagarDataReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader" /> to the next record.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EagarDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EagarDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EagarDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.EgarDataRecord">
            <summary>
            Provides an IDataRecord Access that enumerates the Source record
            </summary>
            <seealso cref="T:System.Data.IDataRecord" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.EgarDataRecord._accessLayer">
            <summary>
            The access layer
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.#ctor(System.Data.IDataRecord,JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Enumerates all items in the source record
            </summary>
            <param name="sourceRecord">The source record.</param>
            <param name="accessLayer">The access layer.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new Eagar recrod based on an Dictionary
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.EgarDataRecord" /> class.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EgarDataRecord.Objects">
            <summary>
            Gets or sets the objects.
            </summary>
            <value>
            The objects.
            </value>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object" /> which will contain the field value upon return.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
            <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>
            The index of the named field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean.
            </summary>
            <param name="i">The i.</param>
            <returns>
            The value of the column.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of bytes read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">fieldOffset
            or
            bufferoffset
            or
            bufferoffset</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of characters read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fieldoffset
            or
            bufferoffset
            or
            bufferoffset
            </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The GUID value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The string value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the specified field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.GetData(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            true if the specified field is set to null; otherwise, false.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EgarDataRecord.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EgarDataRecord.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.EgarDataRecord.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">Name is unkown</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.ObjectDataRecord">
            <summary>
            Wraps access to an object by supporting the IDataReader interface
            When use functions that accepts a name allways use the Database names
            </summary>
            <seealso cref="T:System.Data.IDataReader" />
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.#ctor(System.Object,JPB.DataAccess.DbInfoConfig.DbConfig,System.Int32)">
            <summary>
            Creates a new Object Data Recored that proviedes Access to an single Poco by using the IDataReader interface
            </summary>
            <param name="poco"></param>
            <param name="config"></param>
            <param name="depth"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetName(System.Int32)">
            <summary>Gets the name for the field to find.</summary>
            <returns>The name of the field or the empty string (""), if there is no value to return.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetDataTypeName(System.Int32)">
            <summary>Gets the data type information for the specified field.</summary>
            <returns>The data type information for the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetFieldType(System.Int32)">
            <summary>Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</summary>
            <returns>The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetValue(System.Int32)">
            <summary>Return the value of the specified field.</summary>
            <returns>The <see cref="T:System.Object" /> which will contain the field value upon return.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetValues(System.Object[])">
            <summary>Populates an array of objects with the column values of the current record.</summary>
            <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into. </param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetOrdinal(System.String)">
            <summary>Return the index of the named field.</summary>
            <returns>The index of the named field.</returns>
            <param name="name">The name of the field to find. </param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetBoolean(System.Int32)">
            <summary>Gets the value of the specified column as a Boolean.</summary>
            <returns>The value of the column.</returns>
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetByte(System.Int32)">
            <summary>Gets the 8-bit unsigned integer value of the specified column.</summary>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
            <returns>The actual number of bytes read.</returns>
            <param name="i">The zero-based column ordinal. </param>
            <param name="fieldOffset">The index within the field from which to start the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation. </param>
            <param name="length">The number of bytes to read. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetChar(System.Int32)">
            <summary>Gets the character value of the specified column.</summary>
            <returns>The character value of the specified column.</returns>
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
            <returns>The actual number of characters read.</returns>
            <param name="i">The zero-based column ordinal. </param>
            <param name="fieldoffset">The index within the row from which to start the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation. </param>
            <param name="length">The number of bytes to read. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetGuid(System.Int32)">
            <summary>Returns the GUID value of the specified field.</summary>
            <returns>The GUID value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetInt16(System.Int32)">
            <summary>Gets the 16-bit signed integer value of the specified field.</summary>
            <returns>The 16-bit signed integer value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetInt32(System.Int32)">
            <summary>Gets the 32-bit signed integer value of the specified field.</summary>
            <returns>The 32-bit signed integer value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetInt64(System.Int32)">
            <summary>Gets the 64-bit signed integer value of the specified field.</summary>
            <returns>The 64-bit signed integer value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetFloat(System.Int32)">
            <summary>Gets the single-precision floating point number of the specified field.</summary>
            <returns>The single-precision floating point number of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetDouble(System.Int32)">
            <summary>Gets the double-precision floating point number of the specified field.</summary>
            <returns>The double-precision floating point number of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetString(System.Int32)">
            <summary>Gets the string value of the specified field.</summary>
            <returns>The string value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetDecimal(System.Int32)">
            <summary>Gets the fixed-position numeric value of the specified field.</summary>
            <returns>The fixed-position numeric value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetDateTime(System.Int32)">
            <summary>Gets the date and time data value of the specified field.</summary>
            <returns>The date and time data value of the specified field.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetData(System.Int32)">
            <summary>Returns an <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.</summary>
            <returns>The <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.IsDBNull(System.Int32)">
            <summary>Return whether the specified field is set to null.</summary>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.ObjectDataRecord.FieldCount">
            <summary>Gets the number of columns in the current row.</summary>
            <returns>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.Close">
            <summary>Closes the <see cref="T:System.Data.IDataReader" /> Object.</summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.GetSchemaTable">
            <summary>
            Returns a table that
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.NextResult">
            <summary>Advances the data reader to the next result, when reading the results of batch SQL statements.</summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.ObjectDataRecord.Read">
            <summary>Advances the <see cref="T:System.Data.IDataReader" /> to the next record.</summary>
            <returns>Allways false</returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.ObjectDataRecord.Depth">
            <summary>Gets a value indicating the depth of nesting for the current row.</summary>
            <returns>The level of nesting.</returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.ObjectDataRecord.IsClosed">
            <summary>Gets a value indicating whether the data reader is closed.</summary>
            <returns>true if the data reader is closed; otherwise, false.</returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.ObjectDataRecord.RecordsAffected">
            <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
            <returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</returns>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql">
            <summary>
            Wrapps MsSQL spezifc data
            </summary>
            <seealso cref="T:JPB.DataAccess.Contacts.IDatabaseStrategy" />
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.TEMPLATE_MSSQL_UNTRUSTED">
            <summary>
            The template MSSQL untrusted
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.TEMPLATE_MSSQL_TRUSTED">
            <summary>
            The template MSSQL trusted
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql._connStr">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql"/> class.
            </summary>
            <param name="strServer">The string server.</param>
            <param name="strDatabase">The string database.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql"/> class.
            </summary>
            <param name="strServer">The string server.</param>
            <param name="strDatabase">The string database.</param>
            <param name="strLogin">The string login.</param>
            <param name="strPassword">The string password.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql"/> class.
            </summary>
            <param name="strConnStr">The string connection string.</param>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.SourceDatabase">
            <summary>
            Defines the database type this Strategy is used for
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.ConnectionString">
            <summary>
            An Valid Connection string for the given Strategy
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.DatabaseFile">
            <summary>
            Optional used when connecting to a Local file
            </summary>
            <exception cref="T:System.Exception">The method or operation is not implemented.</exception>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.ServerName">
            <summary>
            Should return the current database if availibe
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateConnection">
            <summary>
            Creates a new Provider specific Connection that will held open until all actors want to close it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateCommand(System.String,System.Data.IDbConnection,System.Data.IDataParameter[])">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a query parameter.
            </summary>
            <param name="strName">Name of the string.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates the data adapter.
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateDataTable(System.String,System.Data.IDbCommand)">
            <summary>
            Creates a data table.
            </summary>
            <param name="name">The name.</param>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetlastInsertedID_Cmd(System.Data.IDbConnection)">
            <summary>
            Getlasts a inserted identifier command.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreatePager``1">
            <summary>
            Creates a data pager.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CreateConverterPager``2">
            <summary>
            Creates the a pager that can convert each item.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
            Formarts a Command into a QueryCommand after the Strategy rules
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.ConvertParameter(System.Data.DbType)">
            <summary>
            Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CompactDatabase(System.String,System.String)">
            <summary>
            Compacts the database.
            </summary>
            <param name="strSource">The string source.</param>
            <param name="strDest">The string dest.</param>
            <exception cref="T:System.NotImplementedException">The method or operation is not implemented.</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.ShrinkDatabase(System.String)">
            <summary>
            Shrinks the database.
            </summary>
            <param name="strConnectionString">The string connection string.</param>
            <exception cref="T:System.NotImplementedException">The method or operation is not implemented.</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.PrepareQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Prepares the query.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strSql">The string SQL.</param>
            <exception cref="T:System.NotImplementedException">The method or operation is not implemented.</exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.Import(System.Data.DataTable,System.Data.IDbCommand)">
            <summary>
            Imports the specified dt.
            </summary>
            <param name="dt">The dt.</param>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetTimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetTimeStamp(System.DateTime)">
            <summary>
            Gets the time stamp.
            </summary>
            <param name="dtValue">The dt value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetTables(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the tables.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strFilter">The string filter.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetTableColumns(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Gets the table columns.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strTableName">Name of the string table.</param>
            <param name="exclude">The exclude.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.DropTable(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strTableName">Name of the string table.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetViewsSql(System.String)">
            <summary>
            Gets the views SQL.
            </summary>
            <param name="strName">Name of the string.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.GetStoredProcedureSql(System.String)">
            <summary>
            Gets the stored procedure SQL.
            </summary>
            <param name="strName">Name of the string.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.SupportsView(System.Data.IDbConnection,System.String)">
            <summary>
            Supportses the view.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strName">Name of the string.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.SupportsStoredProcedure(System.Data.IDbConnection,System.String)">
            <summary>
            Supportses the stored procedure.
            </summary>
            <param name="conn">The connection.</param>
            <param name="strName">Name of the string.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CommandAsMsSql(System.Data.IDbCommand)">
            <summary>
            Commands as ms SQL.
            </summary>
            <param name="sc">The sc.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.ParameterValue(System.Data.SqlClient.SqlParameter)">
            <summary>
            Parameters the value.
            </summary>
            <param name="sp">The sp.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.Pager.IDataPager`1" />
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.SqlVersion">
            <summary>
            The SQL version
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1._cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1._checkRun">
            <summary>
            The check run
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1._currentPage">
            <summary>
            The current page
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1._syncHelper">
            <summary>
            The synchronize helper
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1"/> class.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.Cache">
            <summary>
            Not Implimented
            </summary>
            <exception cref="T:System.Exception">To be supported ... sory</exception>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.BaseQuery">
            <summary>
            Base query to get a collection of <typeparamref name="T" /> Can NOT contain an Order Statement. Please use the CommandQuery property for this
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.CommandQuery">
            <summary>
            For Advanced querys including Order statements
            </summary>
            <value>
            The command query.
            </value>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.RaiseEvents">
            <summary>
            Should raise Events
            </summary>
        </member>
        <member name="E:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.NewPageLoading">
            <summary>
            Raised if new Page is loading
            </summary>
        </member>
        <member name="E:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.NewPageLoaded">
            <summary>
            Raised if new page is Loaded
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.AppendedComands">
            <summary>
            Commands that are sequencely attached to the main pager command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.CurrentPage">
            <summary>
            Id of Current page beween 1 and MaxPage
            </summary>
            <exception cref="T:System.InvalidOperationException">The current page must be bigger or equals 1</exception>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.pk">
            <summary>
            The pk
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.MaxPage">
            <summary>
            The last possible Page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.PageSize">
            <summary>
            Items to load on one page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.TotalItemCount">
            <summary>
            Get the complete ammount of all items listend
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.CurrentPageItems">
            <summary>
            Typed list of all Elements
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.JPB#DataAccess#Contacts#Pager#IDataPager#LoadPage(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Loads the PageSize into CurrentPageItems
            </summary>
            <param name="dbAccess"></param>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.JPB#DataAccess#Contacts#Pager#IDataPager#CurrentPageItems">
            <summary>
            Typed list of all Elements
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.SyncHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.RaiseNewPageLoaded">
            <summary>
            Raises the new page loaded.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.RaiseNewPageLoading">
            <summary>
            Raises the new page loading.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.CheckVersionForFetch">
            <summary>
            Checks the version for fetch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataPager`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1" />
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataPager`1.CurrentPageItems">
            <summary>
            Gets the current page items.
            </summary>
            <value>
            The current page items.
            </value>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2">
            <summary>
                Converts all items from T to TE
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.RaiseEvents">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.Converter">
            <summary>
            Function to convert all items from T to TE
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.CurrentPageItems">
            <summary>
            Gets or sets the current page items.
            </summary>
            <value>
            The current page items.
            </value>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.OdbcProvider.Obdc">
            <summary>
            Default UNTESTED impl
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb">
            <summary>
            Default UNTESTED impl
            </summary>
            <seealso cref="T:JPB.DataAccess.Contacts.IDatabaseStrategy" />
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.TEMPLATE_MSSQL_UNTRUSTED">
            <summary>
            The template MSSQL untrusted
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.TEMPLATE_MSSQL_TRUSTED">
            <summary>
            The template MSSQL trusted
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb"/> class.
            </summary>
            <param name="strServer">The string server.</param>
            <param name="strDatabase">The string database.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb"/> class.
            </summary>
            <param name="strServer">The string server.</param>
            <param name="strDatabase">The string database.</param>
            <param name="strLogin">The string login.</param>
            <param name="strPassword">The string password.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb"/> class.
            </summary>
            <param name="strConnStr">The string connection string.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
            Formarts a Command into a QueryCommand after the Strategy rules
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.ConvertParameter(System.Data.DbType)">
            <summary>
            Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.SourceDatabase">
            <summary>
            Defines the database type this Strategy is used for
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.ConnectionString">
            <summary>
            An Valid Connection string for the given Strategy
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.DatabaseFile">
            <summary>
            Optional used when connecting to a Local file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.ServerName">
            <summary>
            Should return the current database if availibe
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateConnection">
            <summary>
            Creates a new Provider specific Connection that will held open until all actors want to close it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateCommand(System.String,System.Data.IDbConnection,System.Data.IDataParameter[])">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a query parameter.
            </summary>
            <param name="strName">Name of the string.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates the data adapter.
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateDataTable(System.String,System.Data.IDbCommand)">
            <summary>
            Creates a data table.
            </summary>
            <param name="name">The name.</param>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.GetlastInsertedID_Cmd(System.Data.IDbConnection)">
            <summary>
            Getlasts a inserted identifier command.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreatePager``1">
            <summary>
            Creates a data pager.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.OleDBProvider.OleDb.CreateConverterPager``2">
            <summary>
            Creates the a pager that can convert each item.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.XmlDataRecord">
            <summary>
            This is an Helper for reading Xml Based columns in a way as a Ado.net Constructor is written
            </summary>
            <seealso cref="T:System.Data.IDataRecord" />
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.XmlDataRecord._target">
            <summary>
            The target
            </summary>
        </member>
        <member name="F:JPB.DataAccess.AdoWrapper.XmlDataRecord.baseElement">
            <summary>
            The base element
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.#ctor(System.String,System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.XmlDataRecord"/> class.
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <param name="target">The target.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.#ctor(System.Xml.Linq.XDocument,System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.XmlDataRecord"/> class.
            </summary>
            <param name="baseElement">The base element.</param>
            <param name="target">The target.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.#ctor(System.String,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.XmlDataRecord"/> class.
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.#ctor(System.Xml.Linq.XDocument,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.AdoWrapper.XmlDataRecord"/> class.
            </summary>
            <param name="baseElement">The base element.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object" /> which will contain the field value upon return.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.XmlDataRecord.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.XmlDataRecord.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.XmlDataRecord.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
            <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>
            The index of the named field.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The value of the column.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of bytes read.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of characters read.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The GUID value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The string value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the specified field.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.GetData(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            true if the specified field is set to null; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.TryParse(System.String,System.Type,System.Boolean,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            This is our standart solution for Seriliation
            takes care of the loader strategy
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <param name="target">The target.</param>
            <param name="single">if set to <c>true</c> [single].</param>
            <param name="accessLayer">The access layer.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.CreateListOfItems">
            <summary>
            Creates the list of items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILocalDbCheckConstraint`1">
            <summary>
            Creates a new Strong Typed Constraint
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbCheckConstraint`1.CheckConstraint(`0)">
            <summary>
            The function that checks if the certain constraint is fulfilled
            </summary>
            <param name="item"></param>
            <returns>True if success false if failed</returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILocalDbConstraint">
            <summary>
            Defines a new Constraint that can be applyed to a Database
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.ILocalDbConstraint.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint">
            <summary>
            Contains logic for generating primary key values that are used by the LocalDbRepro
            Per Instance of LocalTable
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint.UpdateIndex(System.Int64)">
            <summary>
            Allows to update the index be faking the number of calles to GetNextNumber by <paramref name="index"/>
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILogger">
            <summary>
            Defines mehtods for Logging
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes one or more chars to the output by using string.Format
            </summary>
            <param name="content"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes one or more chars to the output by using string.Format followed by an Enviroment.NewLine
            </summary>
            <param name="content"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1">
             <summary>
            
             </summary>
             <typeparam name="TArg">The type of the argument.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1" />
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1" />
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.ArgumentName">
            <summary>
            The name of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.Type">
            <summary>
            The type of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.Attributes">
            <summary>
            All Attached Attributes
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.ParameterInfo">
            <summary>
            Direct reflection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.Init(System.Reflection.ParameterInfo)">
            <summary>
            For Internal Usage only
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache">
            <summary>
            Contains all Infos about an Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.Attribute">
            <summary>
            	Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.AttributeName">
            <summary>
            	Uniqe ID for the Attribute [ToBeSupported]
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.Init(System.Attribute)">
            <summary>
            Internal use Only
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5">
             <summary>
            
             </summary>
             <typeparam name="TProp"></typeparam>
             <typeparam name="TAttr"></typeparam>
             <typeparam name="TMeth"></typeparam>
             <typeparam name="TCtor"></typeparam>
             <typeparam name="TArg"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Init(System.Type,System.Boolean)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="anon"></param>
             <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Propertys">
            <summary>
                All Propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Attributes">
            <summary>
                All Attributes on class level
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Mehtods">
            <summary>
                All Mehtods
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Constructors">
            <summary>
                All Constructors
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache">
            <summary>
            Defines the most basic infos about an class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache.Name">
            <summary>
                The .net ClassName
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache.Type">
            <summary>
                The .net Type instance
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IConstructorInfoCache`2">
            <summary>
            Holts all infos about an Constructor
            </summary>
            <typeparam name="TAtt">The type of the att.</typeparam>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2" />
            <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IConstructorInfoCache`2" />
            <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IConstructorInfoCache`2" />
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2">
             <summary>
            
             </summary>
             <typeparam name="TAtt">The type of the att.</typeparam>
             <typeparam name="TArg">The type of the argument.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2" />
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2" />
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Delegate">
            <summary>
                if set this method does not exist so we fake it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.MethodInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.MethodName">
            <summary>
                The name of the method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Attributes">
            <summary>
                All Attributes on this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Arguments">
            <summary>
            Arguments for this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.UseILWrapper">
            <summary>
            When set to true, an IL Wrapper is used inside the Invoke method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Init(System.Reflection.MethodBase)">
            <summary>
            For internal Usage only
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Init(System.Reflection.MethodBase,System.Type)">
            <summary>
            For internal Usage only
            </summary>
            <param name="mehtodInfo"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.SetterDelegate">
            <summary>
                the type of the Setter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.GetterDelegate">
            <summary>
                the type of the Getter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Setter">
            <summary>
                The Setter mehtod can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Getter">
            <summary>
                The Getter Method can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyType">
            <summary>
                The return type of the property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyName">
            <summary>
                The name of the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Attributes">
            <summary>
                All Attributes on this Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Init(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Sets all propertys on this instance
            </summary>
            <param name="propertyInfo"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IDatabase">
            <summary>
                Database wrapper interface
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.TargetDatabase">
            <summary>
                Defines the Target database we are conneting to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.IsAttached">
            <summary>
                NotImp
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.ConnectionString">
            <summary>
                Get the Current Connection string
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.DatabaseFile">
            <summary>
                If local instance get the file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.DatabaseName">
            <summary>
                Get the Database name that we are connected to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.ServerName">
            <summary>
                Get the Server we are Connected to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.LastExecutedQuery">
            <summary>
                Get the last Executed QueryCommand wrapped by a Debugger
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreatePager``1">
            <summary>
                Get Database specific Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreatePager``2">
            <summary>
                Get database specific converter Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Attach(JPB.DataAccess.Contacts.IDatabaseStrategy)">
            <summary>
                Required
                Is used to attach a Strategy that handles certain kinds of Databases
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Detach">
            <summary>
            Detaches this instance.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetConnection">
            <summary>
                Required
                Is used to create an new Connection based on the Strategy and
                keep it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetTransaction">
            <summary>
                Required
                Is used to create an new Transaction based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Connect(System.Nullable{System.Data.IsolationLevel})">
            <summary>
                Required
                When a new Connection is requested this function is used
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.TransactionRollback">
            <summary>
            rollback the current Transaction.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CloseConnection">
            <summary>
                Required
                Closing a open Connection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CloseAllConnection">
            <summary>
                Required
                Closing all Connections that maybe open
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes a Query that returns no data
            </summary>
            <param name="strSql">The SQL.</param>
            <param name="obj">Arguments</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes a Query that returns no data
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetlastInsertedId">
            <summary>
                Required
                Return the last inserted id based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetDataReader(System.String,System.Object[])">
            <summary>
            Gets the data reader for the given Sql Statement.
            </summary>
            <param name="strSql">The SQL.</param>
            <param name="obj">Arguments.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetSkalar(System.Data.IDbCommand)">
            <summary>
            Gets a single Value from the Query
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetSkalar(System.String,System.Object[])">
            <summary>
            Gets a single Value from the Query
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreateCommand(System.String,System.Data.IDataParameter[])">
            <summary>
                Required
                Creates a Command based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreateParameter(System.String,System.Object)">
            <summary>
                Required
                Creates a Parameter based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetEntitiesList``1(System.String,System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
                Required
                Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetEntitiesList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
                Required
                Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Run(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Run``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase},System.Data.IsolationLevel)">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0},System.Data.IsolationLevel)">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetlastInsertedIdCommand">
            <summary>
            Getlasts the inserted identifier command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
                Formarts a Command to a executable QueryCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.ConvertParameter(System.Data.DbType)">
            <summary>
                Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IDatabaseStrategy">
            <summary>
            A Strategy for accessing a Database Provider
            </summary>
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.SourceDatabase">
            <summary>
                Defines the database type this Strategy is used for
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.ConnectionString">
            <summary>
                An Valid Connection string for the given Strategy
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.DatabaseFile">
            <summary>
                Optional used when connecting to a Local file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.ServerName">
            <summary>
                Should return the current database if availibe
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateConnection">
            <summary>
                Creates a new Provider specific Connection that will held open until all actors want to close it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateCommand(System.String,System.Data.IDbConnection,System.Data.IDataParameter[])">
            <summary>
            Creates a command.
            </summary>
            <param name="strSql">The string SQL.</param>
            <param name="conn">The connection.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a query parameter.
            </summary>
            <param name="strName">Name of the string.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates the data adapter.
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateDataTable(System.String,System.Data.IDbCommand)">
            <summary>
            Creates a data table.
            </summary>
            <param name="name">The name.</param>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.GetlastInsertedID_Cmd(System.Data.IDbConnection)">
            <summary>
            Getlasts a inserted identifier command.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreatePager``1">
            <summary>
            Creates a data pager.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateConverterPager``2">
            <summary>
            Creates the a pager that can convert each item.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
                Formarts a Command into a QueryCommand after the Strategy rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.ConvertParameter(System.Data.DbType)">
            <summary>
                Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IQueryParameter">
            <summary>
                Wraps Paramters for Commands
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.Name">
            <summary>
            The name of this Paramether with or without leeding @
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.Value">
            <summary>
            The Real value that is given to Ado.net
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.SourceType">
            <summary>
            In Certain cases ( as when using an NvarBinary column in MSSQL ) it is nessesary to declare the column type explicid
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.SourceDbType">
            <summary>
            The from SourceType resultung SourceDbType
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IValueConverter">
            <summary>
                Converts values from DB to C# and back
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value from a DB to a C# object
            </summary>
            <returns>C# object that is of type of property</returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value from a C# object to the proper DB eqivaluent
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILoadFromXmlStrategy">
            <summary>
                Used to load a Xml based Entry from a xml text
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILoadFromXmlStrategy.LoadFromXml(System.String)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.LoadStrategy">
            <summary>
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Contacts.LoadStrategy.IncludeInSelect">
            <summary>
                Tells the API to include the field name into a Requested Select
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Contacts.LoadStrategy.NotIncludeInSelect">
            <summary>
                Tells the API that the field should be loaded Implizit
                If you do select the field with your own statement the xml will not be parsed
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IDataPagerInfo">
            <summary>
            Defines the Output of an Pager
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPagerInfo.CurrentPage">
            <summary>
                Id of Current page beween 1 and MaxPage
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPagerInfo.MaxPage">
            <summary>
                The last possible Page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPagerInfo.PageSize">
            <summary>
                Items to load on one page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPagerInfo.TotalItemCount">
            <summary>
            Get the complete ammount of all items listend
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IDataPager">
            <summary>
                Base pager
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.BaseQuery">
            <summary>
                The most simple Select that produces result data. An aditional QueryCommand will wrap to enable Pageing, this so be aware
                of it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.Cache">
            <summary>
                Not Implimented
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.RaiseEvents">
            <summary>
                Should raise Events
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.AppendedComands">
            <summary>
                Commands that are sequencely attached to the main pager command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.CurrentPageItems">
            <summary>
                Additional Commands to append to the base load command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.SyncHelper">
            <summary>
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Contacts.Pager.IDataPager.NewPageLoading">
            <summary>
                Raised if new Page is loading
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Contacts.Pager.IDataPager.NewPageLoaded">
            <summary>
                Raised if new Page is loaded
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.Pager.IDataPager.LoadPage(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Loads the PageSize into CurrentPageItems
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IDataPager`1">
            <summary>
                Generic Data pager
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager`1.CurrentPageItems">
            <summary>
                Typed list of all Elements
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2">
            <summary>
                A wrapper interface to convert all incomming items from Load method into new type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2.Converter">
            <summary>
                Function to convert all items from T to TE
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2.CurrentPageItems">
            <summary>
                new Collection of TE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IQueryFactoryResult">
            <summary>
                Marker interface for an QueryCommand that was created due the invoke of a Factory mehtod
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryFactoryResult.Query">
            <summary>
                The SQL QueryCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryFactoryResult.Parameters">
            <summary>
                Sql QueryCommand Parameter
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbConfigHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfigHelper.IsAnonymousType(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache)">
            <summary>
                Anonymous type check by naming convention
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfigHelper.GetClassInfo(System.Type)">
            <summary>
                Get the ClassInfoCache object for the type
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.ClassInfoCache">
            <summary>
                Easy access to the known Class Info
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPropertyAttribute``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                Set a attribute on a property
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPropertyAttribute(System.String,JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                Set a attribute on a property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetMethodAttribute``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a method
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetMethodAttribute(System.String,JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod(System.String,System.Func{System.Object,System.Object[],System.Object},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod``2(System.String,System.Action{``0,``1},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod``2(System.String,System.Func{``0,``1},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateProperty``1(System.String,System.Action{`0,``0},System.Func{`0,``0},JPB.DataAccess.MetaApi.Model.AttributeInfoCache[])">
            <summary>
                Adds a Fake property to the class getter and setter will be invoked like normal ones
            </summary>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateStaticProperty``1(System.String,JPB.DataAccess.MetaApi.Model.AttributeInfoCache[])">
            <summary>
                Adds a Fake property to the class getter and setter will be invoked like normal ones
            </summary>
            <typeparam name="TE">Type of the Property</typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetClassAttribute(JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetFactory(System.Func{System.Data.IDataRecord,System.Object},System.Boolean)">
            <summary>
                Set a Mehtod for creating an instance. When FullLoad is true the Framework assumes that the Factory has loaded all
                infos from the IDataRecord into the new Object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetConverter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Type)">
            <summary>
                Set a converter type that allows you to convert incomming and outgoing data to be converted befor set to the
                property
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPrimaryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set the Primary key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetForginKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Forgin key on a Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetForModelKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
                Set a ForModelAttribute key on a Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetDeleteFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a delete factory mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetObjectFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Object factory mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetSelectFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Select method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetInsertFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Insert mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetUpdateFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Update mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetTableNameKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
                Set the Table Name ForModelAttribute key
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbConfig">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.DbInfoConfig.DbConfig"/> class.
            </summary>
            <param name="local"></param>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbConfig.ConstructorSettings">
            <summary>
                The settings that are used to create a DOM ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.GetOrCreateClassInfoCache(System.Type)">
            <summary>
            Gets an Cache object if exists or creats one
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.GetOrCreateClassInfoCache(System.String)">
            <summary>
            Gets the or create class information cache.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.SetConfig``1(System.Action{JPB.DataAccess.DbInfoConfig.ConfigurationResolver{``0}})">
            <summary>
                Allows you to alter the MetaInfoStore store that holds <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Include``1">
            <summary>
                Append
                <typeparamref name="T" />
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Include(System.Type)">
            <summary>
                Append the type
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Include(System.Type[])">
            <summary>
            Includes the specified types.
            </summary>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodArgument">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodArgument.DeclaringMethod">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache.#ctor(System.Attribute)">
            <summary>
            
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1">
            <summary>
            Attributes with Database spezifc members
            </summary>
            <typeparam name="TAttr"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.#ctor(JPB.DataAccess.MetaApi.Model.AttributeInfoCache)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.Attribute">
            <summary>
            Strongly typed Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.WrapperOrNull(JPB.DataAccess.MetaApi.Model.AttributeInfoCache)">
            <summary>
            Wraps and Attribute into an strong typed DbAttribute
            </summary>
            <param name="firstOrDefault"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache">
            <summary>
                for internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Init(System.Type,System.Boolean)">
            <summary>
            For interal use Only
            </summary>
            <param name="type"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Factory">
            <summary>
                If enumerated a method that creats an Instance and then fills all propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.FullFactory">
            <summary>
                Internal Use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.ForModel">
            <summary>
                If known the ForModelAttribute attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.SelectFactory">
            <summary>
                If known the SelectFactory Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.MethodProxyAttribute">
            <summary>
            	If knwon the MethodProxyAttribute Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.SchemaMappingValues">
            <summary>
                Key is C# Property name and Value is DB Eqivalent
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.TableName">
            <summary>
            	Easy access to the SQL Table name
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.HasRelations">
            <summary>
                Internal use Only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.RowVersionProperty">
            <summary>
            	If known the Property with an RowVersion Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.PrimaryKeyProperty">
            <summary>
            	If knwon the Property with an PrimaryKey Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Refresh(System.Boolean)">
            <summary>
                When alternating the Configuration you have to call this method to renew the property enumerations.
                This also happens after the usage of the config attribute
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache">
            <summary>
                Infos about the Ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache">
            <summary>
                Infos about the Method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache"/> class.
            </summary>
            <param name="mehtodInfo">The mehtod information.</param>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.#ctor(System.Func{System.Object,System.Object[],System.Object},System.Type,System.String,JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache"/> class.
            </summary>
            <param name="fakeMehtod">The fake mehtod.</param>
            <param name="declaringType">Type of the declaring.</param>
            <param name="name">The name.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.Init(System.Reflection.MethodBase)">
            <summary>
            For Internal use Only
            </summary>
            <param name="mehtodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache">
            <summary>
                Infos about the Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForModelAttribute">
            <summary>
                if known the ForModelAttribute attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.FromXmlAttribute">
            <summary>
                if known the ForXml attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForginKeyDeclarationAttribute">
            <summary>
                if known the ForXml attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.InsertIgnore">
            <summary>
                Should this property not be inserterd
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForginKeyAttribute">
            <summary>
                if known the ForginKey attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.DbName">
            <summary>
                Returns the For Model name if known or the Propertyname
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.RowVersionAttribute">
            <summary>
            	if known the RowVersion Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.PrimaryKeyAttribute">
            <summary>
            	if knwon the PrimaryKey Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.IgnoreAnyAttribute">
            <summary>
            	if knwon the Ignore Reflection Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.Refresh">
            <summary>
                For internal Usage only
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.FactoryHelper">
            <summary>
                Only for internal use
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateTypeConstructor(System.Boolean)">
            <summary>
            Creates a new CodeDOM Element that is ether a Factory(Public Static Object Factory) or an constructor
            Both functions accepts only one Argument of type IDataRecord
            Both functions are empty
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateConstructor(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.DbInfoConfig.FactoryHelperSettings,System.CodeDom.CodeNamespace)">
            <summary>
            Generates a Constructor with a Full Ado.Net constructor
            </summary>
            <param name="target"></param>
            <param name="settings"></param>
            <param name="importNameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateFactory(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.DbInfoConfig.FactoryHelperSettings,System.CodeDom.CodeNamespace)">
            <summary>
            Generates a Function with a Full ado.net constructor beavior.
            It Creates a new Instance of <param name="target"></param> and then fills all public properties
            </summary>
            <param name="settings"></param>
            <param name="importNameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.CreateShortCodeTypeReference(System.Type,System.CodeDom.CodeNamespaceImportCollection)">
            <summary>
            Creates the short code type reference.
            </summary>
            <param name="type">The type.</param>
            <param name="imports">The imports.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.Shortify(System.CodeDom.CodeTypeReference,System.Type,System.CodeDom.CodeNamespaceImportCollection)">
            <summary>
            Shortifies the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <param name="type">The type.</param>
            <param name="imports">The imports.</param>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateBody(System.Collections.Generic.Dictionary{System.String,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache},JPB.DataAccess.DbInfoConfig.FactoryHelperSettings,System.CodeDom.CodeNamespace,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression)">
            <summary>
            Creates a new body in stlye of an Ado.net Constructor and attaches it to the <paramref name="target"/>
            </summary>
            <param name="properties"></param>
            <param name="settings"></param>
            <param name="importNameSpace"></param>
            <param name="container"></param>
            <param name="target"></param>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateBody(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.DbInfoConfig.FactoryHelperSettings,System.CodeDom.CodeNamespace,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression)">
            <summary>
            Generates a C# DOM body for an IDataReader loader.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="settings">The settings.</param>
            <param name="importNameSpace">The import name space.</param>
            <param name="container">The container.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateTypeConstructor(System.Collections.Generic.IEnumerable{JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache},System.String)">
            <summary>
            Generates a type constructor by using the <see cref="M:JPB.DataAccess.DbInfoConfig.FactoryHelper.GenerateBody(System.Collections.Generic.Dictionary{System.String,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache},JPB.DataAccess.DbInfoConfig.FactoryHelperSettings,System.CodeDom.CodeNamespace,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression)"/>.
            </summary>
            <param name="propertyToDbColumn">The property to database column.</param>
            <param name="altNamespace">The alt namespace.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.CollisonDetectionMode">
            <summary>
            How to handle existing created Poco.Dlls
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbInfoConfig.CollisonDetectionMode.Non">
            <summary>
            No detection. Will may cause File access problems in Multithreaded Environments
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbInfoConfig.CollisonDetectionMode.Optimistic">
            <summary>
            Checks for Existing Dlls and tries to load them. If this failes an exception will be thrown
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbInfoConfig.CollisonDetectionMode.Pessimistic">
            <summary>
            Does not checks for existing dlls. Will allways create a new DLL
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings"/> class.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.FileCollisonDetection">
            <summary>
            	Checks for precreated poco Elements
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.EnforcePublicPropertys">
            <summary>
                Check and throw exception if not all propertys can be accessed by the Super class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.EnforceCreation">
            <summary>
                If any error is thrown so throw exception
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.HideSuperCreation">
            <summary>
                Shame on me.
                To set all propertys from the outside ill create a super class that inherts from the POCO .
                to get rid of this super class you can set this property to true then the superclass will be cased into its
                baseclass.
                If set to true the factory will cast the object to its base class and hide the super creation
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.CreateDebugCode">
            <summary>
                Include PDB debug infos. Deactivate this during tests beacuse it can cause problems.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.DefaultNamespaces">
            <summary>
            A Collection that includes all Namespaces that are used by default to create new Factorys
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.EnumMemberConverter">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.IValueConverter" />
        </member>
        <member name="M:JPB.DataAccess.Helper.EnumMemberConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a DB to a C# object
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns>
            C# object that is of type of property
            </returns>
            <exception cref="T:System.InvalidCastException">No enum member Provided</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.EnumMemberConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a C# object to the proper DB eqivaluent
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ICheckConstraints`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1._localDbRepository">
            <summary>
            The local database repository
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1._constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1"/> class.
            </summary>
            <param name="localDbRepository">The local database repository.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Add(JPB.DataAccess.Contacts.ILocalDbCheckConstraint{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Add(System.String,System.Func{`0,System.Boolean})">
            <summary>
            Adds the specified Check Constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Contains(JPB.DataAccess.Contacts.ILocalDbCheckConstraint{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.CopyTo(JPB.DataAccess.Contacts.ILocalDbCheckConstraint{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Remove(JPB.DataAccess.Contacts.ILocalDbCheckConstraint{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.CheckConstraints`1.Enforce(`0)">
            <summary>
            Enforces all Constraints on the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException"></exception>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1._localDbRepository">
            <summary>
            The local database repository
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0},JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1"/> class.
            </summary>
            <param name="localDbRepository">The local database repository.</param>
            <param name="primaryKey">The primary key.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1.Unique">
            <summary>
            Contains a list of Constrains to ensure all Items have an Index that is Unique
            </summary>
            <value>
            The unique.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1.Default">
            <summary>
            Contains a list of all Constrains to define a Default value on a certain Column
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1.Check">
            <summary>
            Contains a list of all Constrains that checks one or more Columns
            </summary>
            <value>
            The check.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintCollection`1.PrimaryKey">
            <summary>
            Gets the primary key constraints.
            </summary>
            <value>
            The primary key.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ICheckConstraints`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbCheckConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ICheckConstraints`1.Add(System.String,System.Func{`0,System.Boolean})">
            <summary>
            Adds the specified Check Constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ICheckConstraints`1.Enforce(`0)">
            <summary>
            Enforces all Constraints on the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1.Check">
            <summary>
            Gets the check constraints.
            </summary>
            <value>
            The check.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1.Default">
            <summary>
            Gets the default constraints.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1.PrimaryKey">
            <summary>
            Gets the primary key constraints.
            </summary>
            <value>
            The primary key.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IConstraintCollection`1.Unique">
            <summary>
            Gets the unique constraints.
            </summary>
            <value>
            The unique.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1.Add``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.String,System.Func{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds the specified configuration.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The configuration.</param>
            <param name="name">The name.</param>
            <param name="generateValue">The generate value.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1.Add``1(System.String,System.Func{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds the specified name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="generateValue">The generate value.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1.Add``1(System.String,``0,System.Action{`0,``0})">
            <summary>
            Adds the specified name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="setter">The setter.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1.Enforce(`0)">
            <summary>
            Enforces all Contrains on the element
            </summary>
            <param name="elementToAdd">The element to add.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1.Add``1(System.String,System.Func{`0,``0})">
            <summary>
            Adds the specified Unique key generator.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1.Enforce(`0)">
            <summary>
            Enforces the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1.ItemAdded(`0)">
            <summary>
            Add this item to the Unique constraint.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1.ItemRemoved(`0)">
            <summary>
            Remove this item from the Unique constraint
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1.ItemUpdated(`0)">
            <summary>
            Update this item in the Unique constraint
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IDefaultConstraints`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1._localDbRepository">
            <summary>
            The local database repository
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1._constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1"/> class.
            </summary>
            <param name="localDbRepository">The local database repository.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Add(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Add``1(System.String,``0,System.Action{`0,``0})">
            <summary>
            Adds the specified name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="setter">The setter.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Add``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.String,System.Func{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds the specified configuration.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The configuration.</param>
            <param name="name">The name.</param>
            <param name="generateValue">The generate value.</param>
            <param name="column">The column.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Add``1(System.String,System.Func{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds the specified name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="generateValue">The generate value.</param>
            <param name="column">The column.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Contains(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.CopyTo(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Remove(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.DefaultConstraints`1.Enforce(`0)">
            <summary>
            Enforces all Contrains on the element
            </summary>
            <param name="elementToAdd">The element to add.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintComparer">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintComparer.Equals(JPB.DataAccess.Contacts.ILocalDbConstraint,JPB.DataAccess.Contacts.ILocalDbConstraint)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:JPB.DataAccess.Contacts.ILocalDbConstraint"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:JPB.DataAccess.Contacts.ILocalDbConstraint"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.ConstraintComparer.GetHashCode(JPB.DataAccess.Contacts.ILocalDbConstraint)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.IUniqueConstrains`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1._localDbRepository">
            <summary>
            The local database repository
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1._constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1"/> class.
            </summary>
            <param name="localDbRepository">The local database repository.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Add(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Add``1(System.String,System.Func{`0,``0})">
            <summary>
            Adds the specified Unique key generator.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Contains(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.CopyTo(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Remove(JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">Missing Alter or Setup statement of table</exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.ItemAdded(`0)">
            <summary>
            Add this item to the Unique constraint.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.ItemRemoved(`0)">
            <summary>
            Remove this item from the Unique constraint
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.ItemUpdated(`0)">
            <summary>
            Update this item in the Unique constraint
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Collections.UniqueConstrains`1.Enforce(`0)">
            <summary>
            Enforces the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException"></exception>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException">
             <summary>
            
             </summary>
             <seealso cref="T:System.Exception" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint`1.DefaultValue(`0)">
            <summary>
            Defaults the value.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbCheckConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1.Add(`0)">
            <summary>
            Adds the specified item to the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1.Delete(`0)">
            <summary>
            Deletes the specified item from the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1.Update(`0)">
            <summary>
            Updates the specified item in the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraint`2">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <typeparam name="TValue">The type of the value.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraint`2.#ctor(System.String,`1,System.Action{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraint`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="set">The set.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            value
            or
            set
            </exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraint`2.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraint`2.DefaultValue(`0)">
            <summary>
            Defaults the value.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraintEx`2">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <typeparam name="TValue">The type of the value.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbDefaultConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraintEx`2.#ctor(JPB.DataAccess.DbInfoConfig.DbConfig,System.String,System.Func{`1},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraintEx`2"/> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="name">The name.</param>
            <param name="generateValue">The generate value.</param>
            <param name="column">The column.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
            <exception cref="T:System.InvalidCastException">The given property name is invalid. When using Nullable types do not use the Value property. Use the Nullable propertie</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraintEx`2.DefaultValue(`0)">
            <summary>
            Defaults the value.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbDefaultConstraintEx`2.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <typeparam name="TKey">The type of the key.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Contracts.ILocalDbUniqueConstraint`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2._getKey">
            <summary>
            The get key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.#ctor(System.String,System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="getKey">The get key.</param>
            <param name="elementComparer">The element comparer.</param>
            <exception cref="T:System.ArgumentNullException">name
            or
            getKey</exception>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2._index">
            <summary>
            The index
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.LockRoot">
            <summary>
            The lock root
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.CheckConstraint(`0)">
            <summary>
            The function that checks if the certain constraint is fulfilled
            </summary>
            <param name="item"></param>
            <returns>
            True if success false if failed
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.Add(`0)">
            <summary>
            Adds the specified item to the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.Delete(`0)">
            <summary>
            Deletes the specified item from the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbUniqueConstraint`2.Update(`0)">
            <summary>
            Updates the specified item in the Unique Index.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbCheckConstraint`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbCheckConstraint`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbCheckConstraint`1.#ctor(System.String,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbCheckConstraint`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbCheckConstraint`1.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.Defaults.LocalDbCheckConstraint`1.CheckConstraint(`0)">
            <summary>
            The function that checks if the certain constraint is fulfilled
            </summary>
            <param name="item"></param>
            <returns>
            True if success false if failed
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Constraints.ForginKeyConstraintException">
            <summary>
            An exception that will be thrown if an Invalid data insert/update/delete is detected
            </summary>
            <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.ConstraintException" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Constraints.ForginKeyConstraintException.#ctor(System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Constraints.ForginKeyConstraintException"/> class.
            </summary>
            <param name="constraintName">Name of the constraint.</param>
            <param name="changedTableName">Name of the changed table.</param>
            <param name="constraintTableName">Name of the constraint table.</param>
            <param name="constraintValue">The constraint value.</param>
            <param name="pkName">Name of the pk.</param>
            <param name="fkName">Name of the fk.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.EditDatabaseScope">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope" />
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.EditDatabaseScope.Drop">
            <summary>
            Gets the drop command scope.
            </summary>
            <value>
            The drop.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.DropCommand">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DropCommand.#ctor(JPB.DataAccess.Helper.LocalDb.EditDatabaseScope)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.DropCommand"/> class.
            </summary>
            <param name="editDatabaseScope">The edit database scope.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DropCommand.Database(System.Type)">
            <summary>
            Databases the specified for type.
            </summary>
            <param name="forType">For type.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase">
             <summary>
            
             </summary>
             <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Database">
            <summary>
            Gets the database attached to this Reposetory.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.ReposetoryCreated">
            <summary>
            Gets a value indicating whether the reposetory is fully created.
            </summary>
            <value>
              <c>true</c> if the reposetory is fully created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.TypeInfo">
            <summary>
            Gets the type information for the Entity.
            </summary>
            <value>
            The type information.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Add(System.Object)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Contains(System.Int64)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Contains(System.Int32)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.ContainsId(System.Object)">
            <summary>
            Determines whether the specified fk value for table x contains identifier.
            </summary>
            <param name="fkValueForTableX">The fk value for table x.</param>
            <returns>
              <c>true</c> if the specified fk value for table x contains identifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Remove(System.Object)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.ILocalDbReposetoryBase.Update(System.Object)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.#ctor(System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider"/> class.
            </summary>
            <param name="seed">The seed.</param>
            <param name="incriment">The incriment.</param>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider._counter">
            <summary>
            The counter
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.Seed">
            <summary>
            Gets the seed.
            </summary>
            <value>
            The seed.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.Incriment">
            <summary>
            Gets the incriment.
            </summary>
            <value>
            The incriment.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.UpdateIndex(System.Int64)">
            <summary>
            Allows to update the index be faking the number of calles to GetNextNumber by <paramref name="index" />
            </summary>
            <param name="index"></param>
            <exception cref="T:System.InvalidOperationException">Index must be lower then Byte.MaxValue</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="x">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbBytePkProvider.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint" />
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.UpdateIndex(System.Int64)">
            <summary>
            Allows to update the index be faking the number of calles to GetNextNumber by <paramref name="index" />
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.UpdateIndex(System.Object)">
            <summary>
            Updates the index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="x">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbGuidPkProvider.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.#ctor">
            <summary>
            Default primary key generation starts with 1 incriments by 1
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider"/> class.
            </summary>
            <param name="seed">The seed.</param>
            <param name="incriment">The incriment.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.Seed">
            <summary>
            Gets the seed.
            </summary>
            <value>
            The seed.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.Incriment">
            <summary>
            Gets the incriment.
            </summary>
            <value>
            The incriment.
            </value>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider._counter">
            <summary>
            The counter
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.UpdateIndex(System.Int64)">
            <summary>
            Allows to update the index be faking the number of calles to GetNextNumber by <paramref name="index" />
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="x">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbIntPkProvider.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider"/> class.
            </summary>
            <param name="seed">The seed.</param>
            <param name="incriment">The incriment.</param>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider._counter">
            <summary>
            The counter
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.Seed">
            <summary>
            Gets the seed.
            </summary>
            <value>
            The seed.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.Incriment">
            <summary>
            Gets the incriment.
            </summary>
            <value>
            The incriment.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.UpdateIndex(System.Int64)">
            <summary>
            Allows to update the index be faking the number of calles to GetNextNumber by <paramref name="index" />
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="x">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.PrimaryKeyProvider.LocalDbLongPkProvider.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Scopes.ReplicationScope">
            <summary>
            Defines a scope where a Replication can be done. This will disable all Trigger and Constraints and will reinvoke them when the scope is closed
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.ReplicationScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Scopes.ReplicationScope"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Nested Identity Scopes are not supported
            or
            Has to be executed inside a valid TransactionScope
            </exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Scopes.ReplicationScope.Current">
            <summary>
            Gets the current Scope.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.ReplicationScope.Dispose">
            <summary>
            Submits all pending changes
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope">
            <summary>
            Provides a logical scope for defining databases. All DbCollections within this scope are logicly combined.
            Use the Using keyword to ensure correctness
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope.#ctor">
            <summary>
            Creates a new Database
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbManager)">
            <summary>
            Creates a new Database
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope.SetupDone">
            <summary>
            Will be invoked if dispose is called. The delegate is always invoked due the Migration time
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.DatabaseScope.Dispose">
            <summary>
            	Ends the creation of this Database and compile all Data
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Scopes.IdentityInsertScope">
            <summary>
            Defines an Area that allows identity Inserts
            IDENTITY_INSERT on SQL
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.IdentityInsertScope.#ctor(System.Boolean)">
            <summary>
            Creates a new Idenity Scope. Close it with Dispose
            Must be created inside an TransactionScope
            it is strongy recommanded to create this class inside an using construct!
            </summary>
            <param name="rewriteDefaultValues">Should every DefaultValue still be set to a valid Id</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Scopes.IdentityInsertScope.Current">
            <summary>
            The current Identity Scope
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Scopes.IdentityInsertScope.OnIdentityInsertCompleted">
            <summary>
            Occurs when [on identity insert completed].
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Scopes.IdentityInsertScope.Dispose">
            <summary>
            	Ends the Identity Insert and will trigger all indexes and ForgeinKey checks
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1" />
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1.Canceled">
            <summary>
            Gets a value indicating whether this <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1" /> is canceled.
            </summary>
            <value>
            <c>true</c> if canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialToken`1.Cancel(System.String)">
            <summary>
            Cancels with the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1.Canceled">
            <summary>
            Gets a value indicating whether this <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1"/> is canceled.
            </summary>
            <value>
              <c>true</c> if canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken`1.Cancel(System.String)">
            <summary>
            Cancels the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.IInsteadtOfActionToken`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.IInsteadtOfActionToken`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.IInsteadtOfActionToken`1.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.InsteadtOfActionToken`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.IInsteadtOfActionToken`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.InsteadtOfActionToken`1.#ctor(`0,JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.InsteadtOfActionToken`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.InsteadtOfActionToken`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.InsteadtOfActionToken`1.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.IReplicationNode`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.IReplicationNode`1.After">
            <summary>
            Gets the after trigger Collection.
            </summary>
            <value>
            The after.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.IReplicationNode`1.For">
            <summary>
            Gets for trigger Collection.
            </summary>
            <value>
            For.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.IReplicationNode`1.InsteadOf">
            <summary>
            Gets the instead of trigger Collection.
            </summary>
            <value>
            The instead of.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerException">
             <summary>
            
             </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerException.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>
            The reason or null.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.Insert">
            <summary>
            Will be invoked when the Add function is triggerd.
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.Update">
            <summary>
            Will be invoked when an Entity is updated
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.Delete">
            <summary>
            Will be invoked when the Remove function is called
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.OnInsert(`0)">
            <summary>
            Called when [insert] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.OnUpdate(`0)">
            <summary>
            Called when [update] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1.OnDelete(`0)">
            <summary>
            Called when [delete] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerForTableCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerForTableCollection`1.NotForReplication">
            <summary>
            Gets trigger Collections for the not for replication mode.
            </summary>
            <value>
            The not for replication.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerForTableCollection`1.WithReplication">
            <summary>
            Gets trigger Collections for replication mode
            </summary>
            <value>
            The with replication.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ReplicationNode`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.IReplicationNode`1" />
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ReplicationNode`1.For">
            <summary>
            Will be invoked bevor each operation
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ReplicationNode`1.After">
            <summary>
            Will be invoked after the operation and all consistency checks when no exception was thrown
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.ReplicationNode`1.InsteadOf">
            <summary>
            Will be invoked after <c>For</c> and bevor <c>After</c> and replaces the internal Add/Remove/Update call.
            If you still want to Add/Remove/Update the Entity you have to call Add/Remove/Update again
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1">
            <summary>
            Is used to indicate the negative value of an trigger check
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:System.Exception" />
            <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerException" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1.#ctor(System.String,JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>
            The reason or null.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1.Table">
            <summary>
            Gets the attached table to this exception.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.Tabel">
            <summary>
            The tabel
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.Duplication">
            <summary>
            The Collection that should be mirrored
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1._insert">
            <summary>
            Occurs when [insert].
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1._update">
            <summary>
            Occurs when [update].
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1._delete">
            <summary>
            Occurs when [delete].
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0},JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialTriggerCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1"/> class.
            </summary>
            <param name="tabel">The tabel.</param>
            <param name="duplication">The duplication.</param>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.Insert">
            <summary>
            Will be invoked when the Add function is triggerd.
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.Update">
            <summary>
            Will be invoked when an Entity is updated
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.Delete">
            <summary>
            Will be invoked when the Remove function is called
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.InvokeTrigger(System.EventHandler{JPB.DataAccess.Helper.LocalDb.Trigger.ISequentialToken{`0}},`0)">
            <summary>
            Invokes the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="obj">The object.</param>
            <exception cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerException`1"></exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.OnInsert(`0)">
            <summary>
            Called when [insert] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.OnUpdate(`0)">
            <summary>
            Called when [update] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.SequentialSequentialTriggerCollection`1.OnDelete(`0)">
            <summary>
            Called when [delete] is invoked.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerForTableCollectionInternalUsage`1" />
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1._table">
            <summary>
            The table
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.WithReplication">
            <summary>
            Should the trigger also trigger when a XML set is loaded
            </summary>
            <value>
            The with replication.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.NotForReplication">
            <summary>
            Should the trigger only trigger due to normal usage
            </summary>
            <value>
            The not for replication.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.For">
            <summary>
            Gets for.
            </summary>
            <value>
            For.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.After">
            <summary>
            Gets the after.
            </summary>
            <value>
            The after.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerForTableCollection`1.InsteadOf">
            <summary>
            Gets the instead of collection.
            </summary>
            <value>
            The instead of.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.Insert">
            <summary>
            Occurs when [insert] is trigged.
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.Update">
            <summary>
            Occurs when [update] is trigged.
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.Delete">
            <summary>
            Occurs when [delete] is trigged.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.OnInsert(`0)">
            <summary>
            Called when an inserd is called.
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the Obj is handeld</returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.OnUpdate(`0)">
            <summary>
            Called when [update].
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the Obj is handeld</returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1.OnDelete(`0)">
            <summary>
            Called when [delete].
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the Obj is handeld</returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1">
             <summary>
            
             </summary>
             <typeparam name="TEntity">The type of the entity.</typeparam>
             <seealso cref="T:JPB.DataAccess.Helper.LocalDb.Trigger.ITriggerInsteadtOfCollection`1" />
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1._insert">
            <summary>
            Occurs when [insert].
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1._update">
            <summary>
            Occurs when [update].
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1._delete">
            <summary>
            Occurs when [delete].
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.Insert">
            <summary>
            Occurs when [insert] is trigged.
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.Update">
            <summary>
            Will be invoked when an Entity is updated
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.Delete">
            <summary>
            Will be invoked when the Remove function is called
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.AsInsteadtOf">
            <summary>
            Used to allow chained actions.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.OnInsert(`0)">
            <summary>
            Called when an inserd is called.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if the Obj is handeld
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.OnUpdate(`0)">
            <summary>
            Called when [update].
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if the Obj is handeld
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.OnDelete(`0)">
            <summary>
            Called when [delete].
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if the Obj is handeld
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.Trigger.TriggerInsteadtOfCollection`1.Empty">
            <summary>
            Returns an Empty trigger collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.DataContent">
            <summary>
            Provieds the IXmlSerializable interface for an entire database.
            Not thread save
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DataContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.DataContent"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DataContent.GetSchema">
            <summary>
            Gets the schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DataContent.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="reader">The reader.</param>
            <exception cref="T:System.IO.InvalidDataException">
            Invalid XML document for Db import. index is unset
            or
            Invalid XML document for Db import. type is unset
            or
            or
            Invalid XML document for Db import. index for a table is unset
            </exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DataContent.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1">
            <summary>
            Provides LINQ paged access to an LocalDbReporsetory
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:JPB.DataAccess.Contacts.Pager.IDataPager`1" />
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.#ctor(JPB.DataAccess.Helper.LocalDb.LocalDbRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1" /> class.
            </summary>
            <param name="localDbRepository">The local database repository.</param>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1._currentPage">
            <summary>
            The current page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.AppendedComands">
            <summary>
            Commands that are sequencely attached to the main pager command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.BaseQuery">
            <summary>
            The most simple Select that produces result data. An aditional QueryCommand will wrap to enable Pageing, this so be aware
            of it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.Cache">
            <summary>
            Not Implimented
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.CurrentPage">
            <summary>
            Id of Current page beween 1 and MaxPage
            </summary>
            <exception cref="T:System.InvalidOperationException">The current page must be bigger or equals 1</exception>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.CurrentPageItems">
            <summary>
            Typed list of all Elements
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.MaxPage">
            <summary>
            The last possible Page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.PageSize">
            <summary>
            Items to load on one page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.TotalItemCount">
            <summary>
            Get the complete ammount of all items listend
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.RaiseEvents">
            <summary>
            Should raise Events
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.SyncHelper">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.JPB#DataAccess#Contacts#Pager#IDataPager#CurrentPageItems">
            <summary>
            Typed list of all Elements
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.NewPageLoaded">
            <summary>
            Raised if new Page is loaded
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.NewPageLoading">
            <summary>
            Raised if new Page is loading
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.LoadPage(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Loads the PageSize into CurrentPageItems
            </summary>
            <param name="dbAccess"></param>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1._localDbRepository">
            <summary>
            The local database repository
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDataPager`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalDbManager">
             <summary>
            
             </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbManager.Scope">
            <summary>
            Access to the current local Scope
            Not ThreadSave
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.LocalDbManager.SetupDone">
            <summary>
            Will be invoked when the current database is setup
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbManager.Alter">
            <summary>
            allowes to Add or remove tabels from this Database.
            If you try to use the tables before calling dispose on the returned Scope an InvalidOperationException will be thrown
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbManager.GetSerializableContent">
            <summary>
            Creates a new Class that supportes the <c>IXmlSerializable</c> interface. It is linked to this
            database and can be used to read or write all content in this database.
            To Write all elements
            <example>
            <code>
            using (var memStream = new MemoryStream())
            {
            	new XmlSerializer(typeof(DataContent)).Serialize(memStream, LocalDbManager.Scope.GetSerializableContent());
            	var xml = Encoding.ASCII.GetString(memStream.ToArray());
            }
            </code>
            When reading the data the database creation has to be in progress. You must execute the statement inside the DatabaseScope you want to fill
            <code>
            using (new DatabaseScope())
            {
            	//Table creation ...
            	//new LocalDbReposetory&lt;T&gt;(new DbConfig())
            	using (var memStream = new MemoryStream(Encoding.ASCII.GetBytes("xml")))
            	{
            		new XmlSerializer(typeof(DataContent)).Deserialize(memStream);
            	}
            }
            </code>
            </example>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1">
            <summary>
                Maintains a local collection of entitys simulating a basic DB Bevavior
                When enumerating the Repro you will only receive the Current state as it is designed to be thread save
            </summary>
            <remarks>
            All Static and Instance member are Thread Save
            </remarks>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.#ctor(JPB.DataAccess.DbInfoConfig.DbConfig,System.Boolean,JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint)">
            <summary>
                Creates a new Instance that is bound to &lt;paramref name="type"/&gt; and uses &lt;paramref name="keyGenerator"/
                &gt; for generation of PrimaryKeys
                Must created inside an DatabaseScope
            </summary>
            <param name="keyGenerator">The Strategy to generate an uniqe PrimaryKey that matches the PrimaryKey Property</param>
            <param name="config">The Config store to use</param>
            <param name="useOrignalObjectInMemory">
                If enabled the given object referance will be used (Top performance).
                if Disabled each object has to be define an Valid Ado.Net constructor to allow a copy (Can be slow)
            </param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.#ctor(System.Type,JPB.DataAccess.DbInfoConfig.DbConfig,System.Boolean,JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint)">
            <summary>
                Creates a new Instance that is bound to &lt;paramref name="type"/&gt; and uses &lt;paramref name="keyGenerator"/
                &gt; for generation of PrimaryKeys
                Must created inside an DatabaseScope
            </summary>
            <param name="keyGenerator">The Strategy to generate an uniqe PrimaryKey that matches the PrimaryKey Property</param>
            <param name="containedType">The type that overwrites the Generic type. Must use object as Generic type arugment</param>
            <param name="config">The Config store to use</param>
            <param name="useOrignalObjectInMemory">
                If enabled the given object referance will be used (Top performance).
                if Disabled each object has to be define an Valid Ado.Net constructor to allow a copy (Can be slow)
            </param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.#ctor">
            <summary>
                Creates a new, only local Reposetory by using one of the Predefined KeyGenerators
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Item(System.Object)">
            <summary>
                Returns an object with the given Primarykey
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Triggers">
            <summary>
                Contains acccess to INSERT/DELETE/UPDATE(WIP) Triggers
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Constraints">
            <summary>
                Access to a collection of Constraints valid for this Table
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Config">
            <summary>
            The used Config Store
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value>
            Allways false
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Add(`0)">
            <summary>
                Adds a new Item to the Table
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Clear">
            <summary>
                Removes all items from this Table
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Remove(`0)">
            <summary>
            Removes the given Item based on its PrimaryKey
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.ReposetoryCreated">
            <summary>
                Returns an value that indicates a proper DatabaseScope usage.
                If true the creation was successfull and all tables for the this table are mapped
                The Reposetory cannot operate if the reposetory is not created!
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Database">
            <summary>
            Gets the database attached to this Reposetory.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.IsMigrating">
            <summary>
            Gets or sets a value indicating whether this instance is migrating.
            </summary>
            <value>
            <c>true</c> if this instance is migrating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.CopyTo(System.Array,System.Int32)">
            <summary>
                Thread save
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.ContainsId(System.Object)">
            <summary>
            Determines whether the specified fk value for table x contains identifier.
            </summary>
            <param name="fkValueForTableX">The fk value for table x.</param>
            <returns>
              <c>true</c> if the specified fk value for table x contains identifier; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">fkValueForTableX</exception>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Add(System.Object)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Contains(System.Int64)">
            <summary>
                Checks if the given primarykey is taken
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Contains(System.Int32)">
            <summary>
                Checks if the given primarykey is taken
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Remove(System.Object)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Update(System.Object)">
            <summary>
            Updates the Entity in memory. Only applies to LocalDbReposetorys that uses Object copys
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.TypeInfo">
            <summary>
            Gets the Generated Type Cache
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Init(System.Type,JPB.DataAccess.Contacts.ILocalDbPrimaryKeyConstraint,JPB.DataAccess.DbInfoConfig.DbConfig,System.Boolean)">
            <summary>
            Internal Usage
            </summary>
            <param name="type"></param>
            <param name="keyGenerator"></param>
            <param name="config"></param>
            <param name="useOrignalObjectInMemory"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.Update(`0)">
            <summary>
            Updates the Entity in memory. Only applies to LocalDbReposetorys that uses Object copys
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.CreatePager">
            <summary>
            Creates a pager object that can be used to page this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbRepository`1.ToArray">
            <summary>
                Thread save
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.PocoPkComparer`1">
            <summary>
            Compares 2 Pocos based on there PrimaryKeys. Requires all Pocos to define one property with the PrimaryKey attribute
            When both of the instances are of the same reference: return true
            When one of the instances is default(T): return false
            When both of the instances Primary Key has the assertNotDatabaseMember: return false
            When both of the instances Primary Key are Equals: return true
            return false
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:JPB.DataAccess.Helper.PocoPkComparer`1.DefaultAssertionObject">
            <summary>
            The default assertion object that will be used to compare to when no other element is used
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Helper.PocoPkComparer`1.DefaultRewrite">
            <summary>
            Should a cast tried
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.PocoPkComparer`1.Value">
            <summary>
            When Equals is used the result is stored in this Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor">
            <summary>
            New Instance of the Auto Equality Comparer with no assertion on its default value for an Primary key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            New Instance of the Auto Equality Comparer with no assertion on its default value for an Primary key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.Int32,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.String,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor(System.Int64,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Helper.PocoPkComparer`1"/> class.
            </summary>
            <param name="assertNotDatabaseMember">The assert not database member.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.Equals(`0,`0)">
            <summary>
            Checks if both have the same Reference.
            Checks if any but not both of them are null.
            Compares both Primary keys against the assertNotDatabaseMember Object
            Compares both Primary key Propertys by using Equals
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.GetHashCode(`0)">
            <summary>
            Calls the GetHashCode function on the PrimaryKey
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.Compare(`0,`0)">
            <summary>
            Checks if both arguments are ReferenceEquals
            Checks if Left is null = 1
            Checks if Right is null = -1
            Calls the
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.QueryParameter">
            <summary>
                Example Implimentation of IQueryParameter
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Wraps a Query Parameter with a name and value. This defines the type based on the value
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Wraps a Query Parameter with a name and value
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.#ctor(System.String,System.Object,System.Data.DbType)">
            <summary>
            Wraps a Query Parameter with a name and value
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.QueryParameter.Name">
            <summary>
            The name of the Parameter
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.QueryParameter.Value">
            <summary>
            The value of the Parameter
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.QueryParameter.SourceType">
            <summary>
            The C# Type of the Parameter generated from SourceDbType
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.QueryParameter.SourceDbType">
            <summary>
            The SQL Type of the Parameter generated from SourceType
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.Render">
            <summary>
                Renders the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.StringBuilderInterlaced">
            <summary>
            Allows building of strings in a interlaced way
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.#ctor(System.Boolean,System.UInt32)">
             <summary>
            
             </summary>
             <param name="transformInterlaced">If true an level will be displaced as <paramref name="intedtSize"/> spaces</param>
             <param name="intedtSize">ammount of spaces for each level</param>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.Up">
            <summary>
            Each append call will be interlaced by 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.Down">
            <summary>
            Each append call will be interlaced by -1
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendInterlacedLine">
            <summary>
            Appends the interlaced line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendInterlacedLine(System.String)">
            <summary>
            Appends the interlaced line.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendInterlaced(System.String)">
            <summary>
            Appends the interlaced.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.Insert(System.Action{JPB.DataAccess.Helper.StringBuilderInterlaced})">
            <summary>
            Inserts the specified string builder.
            </summary>
            <param name="del">The delete.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.Append(System.String)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendLine(System.String)">
            <summary>
            Appends the line.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendInterlacedLine(System.String,System.Object[])">
            <summary>
            Appends the interlaced line.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.AppendInterlaced(System.String,System.Object[])">
            <summary>
            Appends the interlaced.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.AttributeInfoCache">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.#ctor(System.Attribute)">
            <summary>
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.Init(System.Attribute)">
            <summary>
            For Interal use Only
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.Attribute">
            <summary>
            The Instance of the current Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.AttributeName">
            <summary>
            ToBeSupported
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.AttributeInfoCache`1">
            <summary>
            Easy access to the underlying Attribute by using generics
            </summary>
            <typeparam name="TAttr"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache`1.Attribute">
            <summary>
            The Instance of the current Attribute
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5">
            <summary>
                for internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Init(System.Type,System.Boolean)">
            <summary>
            For interal use Only
            </summary>
            <param name="type"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.DefaultFactory">
            <summary>
            The default constructor that takes no arguments if known
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Name">
            <summary>
                The full .net ClassName with namespace
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Type">
            <summary>
                The .net Type instance
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Propertys">
            <summary>
                All Propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Attributes">
            <summary>
                All Attributes on class level
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Mehtods">
            <summary>
                All Mehtods
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Constructors">
            <summary>
                All Constructors
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ConstructorStructFakeInfoCache">
            <summary>
            Fake Constructor for Structs
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorStructFakeInfoCache.#ctor(System.Func{System.Object},System.String)">
            <summary>
            Creates a new Constructor for an Struct
            </summary>
            <param name="del"></param>
            <param name="name"></param>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2">
            <summary>
                Infos about the Ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.#ctor">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Invoke(System.Object[])">
            <summary>
            Invoke implimentation for Constructors. Calls the underlying Methodinfo without specifying an Caller
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Init(System.Reflection.MethodBase)">
            <summary>
            For internal use Only
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.MethodInfo">
            <summary>
            The method info casted as ConstructorInfo
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Init(System.Reflection.ConstructorInfo)">
            <summary>
            For Interal use Only
            </summary>
            <param name="ctorInfo"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.Equatable.PropertyEquatableComparer`1">
            <summary>
            Defines methods for compareing two Property Cache instances on its Name and location
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.PropertyEquatableComparer`1.Equals(JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0},JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0})">
            <summary>
            Determines whether the specified cache are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="TAtt"/>  to compare.</param>
            <param name="y">The second object of type <typeparamref name="TAtt"/>  to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.PropertyEquatableComparer`1.GetHashCode(JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0})">
            <summary>
            Returns a hash code for the given cache.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.PropertyEquatableComparer`1.Compare(JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0},JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.Equatable.MethodInfoCacheEquatableComparer`2">
             <summary>
            
             </summary>
             <typeparam name="TAtt">The type of the att.</typeparam>
             <typeparam name="TArg">The type of the argument.</typeparam>
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2" />
             <seealso cref="T:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2" />
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.MethodInfoCacheEquatableComparer`2.Equals(JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1},JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1})">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparam name="TAtt" /> to compare.</param>
            <param name="y">The second object of type <typeparam name="TAtt" /> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.MethodInfoCacheEquatableComparer`2.GetHashCode(JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.Equatable.MethodInfoCacheEquatableComparer`2.Compare(JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1},JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1">
            <summary>
            Infos about Arguments delcared on a Mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.#ctor">
            <summary>
            For Internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.ArgumentName">
            <summary>
            The name of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.Type">
            <summary>
            The type of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.Attributes">
            <summary>
            All Attached Attributes
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.ParameterInfo">
            <summary>
            Direct reflection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.Init(System.Reflection.ParameterInfo)">
            <summary>
            For Internal Usage only
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The object is already Initialed. A Change is not allowed</exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.CompareTo(JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache{`0})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.Equals(JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2">
            <summary>
                Infos about the Method on an Class. The given Delegate to the Function is not stored.
            	This IL Body will be extracted and a new Function will be created on runtime for each calling function.
            	Use the <code>FakeMethodInfoCache</code> to create a direct delgate cache that will reuse the delegate pointer and the declaring class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Init(System.Reflection.MethodBase)">
            <summary>
            For Internal use Only
            </summary>
            <param name="mehtodInfo"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Init(System.Reflection.MethodBase,System.Type)">
            <summary>
            For Internal use Only
            </summary>
            <param name="mehtodInfo"></param>
            <param name="sourceType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Init(System.Reflection.MethodBase,System.Type,System.String)">
            <summary>
            For Internal use Only
            </summary>
            <param name="mehtodInfo"></param>
            <param name="sourceType"></param>
            <param name="name">User name for this Mehtod.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Delegate">
            <summary>
                if set this method does not exist so we fake it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.MethodInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.MethodName">
            <summary>
                The name of the method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Arguments">
            <summary>
            Arguments on this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Attributes">
            <summary>
                All Attributes on this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.UseILWrapper">
            <summary>
            Does not use the Original Delegate. Instad uses IL injection to create a new Delegate
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Equals(JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.CompareTo(JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache{`0,`1})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1">
            <summary>
                Infos about the Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Init(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Internal use Only
            </summary>
            <param name="propertyInfo"></param>
            <param name="anon"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The object is already Initialed. A Change is not allowed</exception>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.SetterDelegate">
            <summary>
                the type of the Setter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.GetterDelegate">
            <summary>
                the type of the Getter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Setter">
            <summary>
                The Setter mehtod can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Getter">
            <summary>
                The Getter Method can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyType">
            <summary>
                The return type of the property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyName">
            <summary>
                The name of the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Attributes">
            <summary>
                All Attributes on this Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.CompareTo(JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Equals(JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.MetaInfoStore`6">
            <summary>
                Class info Storage. When this is a Global config store you should may never call the dispose method because it would erase all knwon types
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.IsGlobal">
            <summary>
            Is this instance mapped to the global Cache or does it only maintain its informations as long as it exists
            </summary>
            <value>
              <c>true</c> if this instance is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#ctor(System.Boolean)">
            <summary>
            Creates a new Instance for storing class informations. Allows you to define if this is ether the global config store or a local one
            </summary>
            <param name="local">if set to <c>true</c> [local].</param>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#ctor">
            <summary>
            Creates a new Instance for accessing the Global Config store
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#cctor">
            <summary>
            Initializes the <see cref="T:JPB.DataAccess.MetaApi.MetaInfoStore`6"/> class.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Clear">
            <summary>
            For Internal use Only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.SClassInfoCaches">
            <summary>
            Global or local Cache
            </summary>
            <value>
            The s class information caches.
            </value>
        </member>
        <member name="F:JPB.DataAccess.MetaApi.MetaInfoStore`6.ClassInfoCaches">
            <summary>
            The class information caches
            </summary>
        </member>
        <member name="F:JPB.DataAccess.MetaApi.MetaInfoStore`6._classInfoCaches">
            <summary>
            The class information caches
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.Type)">
            <summary>
            Gets an Cache object if exists or creats one
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.Type,System.Boolean@)">
            <summary>
            Gets an Cache object if exists or creats one
            </summary>
            <param name="type">The type.</param>
            <param name="newCreated">if set to <c>true</c> [new created].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.String,System.Boolean@)">
            <summary>
            Gets an Cache object of exists or creats one
            Return value can be null
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="newCreated">if set to <c>true</c> [new created].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.;typeName</exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetFake(System.String)">
            <summary>
            Creates a new Runtime Fake type that can be filled with propertys
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.;typeName</exception>
            <exception cref="T:System.InvalidOperationException">If type exists in store this exception</exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateMethodInfoCache(System.Reflection.MethodInfo)">
            <summary>
            Gets an Cache object if exists or creats one
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include``1">
            <summary>
            Append
            as an Optimistic input to the store.
            This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
            This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include(System.Type)">
            <summary>
            Append
            as an Optimistic input to the store.
            This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
            This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include(System.Type[])">
            <summary>
            Append
            as an Optimistic input to the store.
            This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
            This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include(`0)">
            <summary>
            Append
            as an Optimistic input to the store.
            This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
            This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <param name="existingItem">The existing item.</param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.EnableGlobalThreadSafety">
            <summary>
            If Enabled the GetOrCreateClassInfoCache mehtod will be locked due usage
            </summary>
            <value>
            <c>true</c> if [enable global thread safety]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.EnableInstanceThreadSafety">
            <summary>
            if Enabled this can overwrite the EnableGlobalThreadSafety property
            </summary>
            <value>
            <c>true</c> if [enable instance thread safety]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions">
            <summary>
            Extention methods for easy access to meta infos
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions.IsAnonymousType(System.Type)">
            <summary>
                Anonymous type check by naming convention
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions.GetPropertyInfoFromLabda``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property information from labda.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions.GetMehtodInfoFromLabda``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the mehtod information from labda.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="T:JPB.DataAccess.DataConverterExtensions">
            <summary>
            Helper Extentions for Maintaining Value
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CreateQueryDebugger(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
            Creates the query debugger.
            </summary>
            <param name="command">The command.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetDataValue(System.Object)">
            <summary>
            Gets the Value or DB null
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetParamaterValue(System.Object,JPB.DataAccess.DbInfoConfig.DbConfig,System.String)">
            <summary>
            Gets the Value from a Paramter with Conversion if Nessesary
            </summary>
            <param name="source">The source.</param>
            <param name="config">The configuration.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            name
            </exception>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetPK(System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Get and Convert the found PK name into Database name
            </summary>
            <param name="type">The type.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFKs(System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Returns All forgin keys of the given type
            </summary>
            <param name="type">The type.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFK(System.Type,System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Gets the first Forgin key that is of type <paramref name="fkType" />
            </summary>
            <param name="type">The type.</param>
            <param name="fkType">Type of the fk.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFK(System.Type,System.String,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Get the forgin key based that contains the
            <paramref name="databaseName" />
            </summary>
            <param name="type">The type.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CopyPropertys(System.Object,System.Object,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            Copies the propertys.
            </summary>
            <param name="base">The base.</param>
            <param name="newObject">The new object.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetConvertedValue(JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache,System.Object)">
            <summary>
            Gets the converted value.
            </summary>
            <param name="source">The source.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(System.Reflection.PropertyInfo)">
            <summary>
            Checks the info declaring type to be an List
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache)">
            <summary>
            Checks the info declaring type to be an List
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(System.Object)">
            <summary>
            Checks the object instance to be an List
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetNavigationProps(System.Type,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            returns all propertys that are marked as Forgin keys
            </summary>
            <param name="type">The type.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetNavigationProps``1(JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
            returns all propertys that are marked as Forgin keys
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetPropertysViaRefection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
            Returns all Cached Propertys from a <paramref name="type" />
            </summary>
            <param name="type">The type.</param>
            <param name="ignore">The ignore.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbAccessLayerHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Nullable{JPB.DataAccess.Manager.DbAccessType},JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.MergeCommands(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean)">
            <summary>		
                Not Connection save
                Must be executed inside a Valid Connection 
            </summary>
            <param name="db"></param>
            <param name="base">left part of the query</param>
            <param name="last">right part of the query</param>
            <param name="autoRename">If an conflict happens a renaming operation happens(use this argument if you are done with the query generation otherwise querys might be invalid) if an collision is detected and this is false an exception will be thrown</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.MergeTextToParameters(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Merges 2 Commands into one single New Command by optionaly renaming and Delimiter insert
            </summary>
            <param name="db"></param>
            <param name="base"></param>
            <param name="last"></param>
            <param name="autoRename"></param>
            <param name="seed"></param>
            <param name="pessimistic"></param>
            <param name="insertDelimiter"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateDbCollection``1(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Creates a DbCollection for the specifiy type
                To Limit the output create a new Type and then define the statement
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.AsQueryParameter(System.Data.IDataParameterCollection)">
            <summary>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String,System.String[],System.Object)">
            <summary>
                Wraps a
                <paramref name="query" />
                on a given
                <paramref name="type" />
                by including
                <paramref name="entry" />
                's
                propertys that are defined in
                <paramref name="propertyInfos" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommand(System.String,JPB.DataAccess.Contacts.IDatabase,System.Object)">
            <summary>
                Wrappes a String into a Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues``1(JPB.DataAccess.Manager.DbAccessLayer,System.String,System.String[],``0)">
            <summary>
                Wraps a
                <paramref name="query" />
                on a given typeof(T) by including
                <paramref name="entry" />
                's
                propertys that are defined in
                <paramref name="propertyInfos" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.String,System.Tuple{System.Type,System.Object}[])">
            <summary>
                Wraps
                <paramref name="query" />
                into a Command and adds the values
                values are added by Index
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Wraps
                <paramref name="query" />
                into a Command and adds the values
                values are added by Name of IQueryParamter
                If item of
                <paramref name="values" />
                contains a name that does not contains @ it will be added
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
                Wraps
                <paramref name="query" />
                into a Command and adds the values
                values are added by Name of IQueryParamter
                If item of
                <paramref name="values" />
                contains a name that does not contains @ it will be added
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Boolean)">
            <summary>
                Returns all Propertys that can be loaded due reflection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.Boolean)">
            <summary>
                Returns all Propertys that can be loaded due reflection
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
                Returns all Propertys that can be loaded due reflection and excludes all propertys in ignore
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.String[])">
            <summary>
                Returns all Propertys that can be loaded due reflection and excludes all propertys in ignore
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.FilterDbSchemaMapping(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
                Maps all propertys of
                <paramref name="type" />
                into the Database columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.FilterDbSchemaMapping``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.String[])">
            <summary>
                Maps all propertys of typeof(T) into the Database columns
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyNames(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Boolean)">
            <summary>
                Maps propertys to database of given type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyNames``1(JPB.DataAccess.DbInfoConfig.DbConfig,System.Boolean)">
            <summary>
                Maps propertys to database of given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommand(JPB.DataAccess.Contacts.IDatabase,System.String)">
            <summary>
                Wraps a Parameterless string into a Command for the given DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.ExecuteGenericCommand(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Execute a QueryCommand on a given Database
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.ConcatCommands(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Not Connection save
                Must be executed inside a Valid Connection
                Takes <paramref name="base" /> as base of Connection propertys
                Merges the Command text of Both commands sepperated by a space
                Creats a new command based on
                <paramref name="db" />
                and Adds the Merged Commandtext and all parameter to it
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.NonObservableDbCollection`1">
            <summary>
                For internal use only
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.NonObservableDbCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.NonObservableDbCollection`1.FromXml(System.String)">
            <summary>
            Creates a DbCollection that contains the XML elements
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.NonObservableDbCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.NonObservableDbCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.DbCollection`1">
            <summary>
                WIP Observes the local collection and allows a Generic save update remove and insert
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbCollection.DbCollection`1.Item(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.GetEntryState(`0)">
             <summary>
            
             </summary>
             <param name="item"></param>
             <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.SaveChanges(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Sync the Changes to this Collection to the Database
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.CollectionStates">
            <summary>
            All states that an item inside an DbCollection can be
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Unknown">
            <summary>
            Element request is not in store
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Unchanged">
            <summary>
            Object was created from the Database and has not changed
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Added">
            <summary>
            Object from UserCode
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Changed">
            <summary>
            Object was created from the database and has changed since then
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Removed">
            <summary>
            Object was created from the database and should be created
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbEventArgs.DatabaseActionEvent">
            <summary>
            Wraps an Event raised by the DbAccessLayer
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbEventArgs.DatabaseActionEvent.#ctor(JPB.DataAccess.DebuggerHelper.QueryDebugger)">
            <summary>
            
            </summary>
            <param name="queryDebugger"></param>
        </member>
        <member name="P:JPB.DataAccess.DbEventArgs.DatabaseActionEvent.QueryDebugger">
            <summary>
            If enabled the QueryDebugger that contains the QueryCommand
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DebuggerHelper.QueryDebugger">
            <summary>
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DebuggerHelper.QueryDebugger.StartValuePart">
            <summary>
            The start value part
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DebuggerHelper.QueryDebugger.EndValuePart">
            <summary>
            The end value part
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DebuggerHelper.QueryDebugger.#ctor(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Debugger that contains some debugging data
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.UseDefaultDatabase">
            <summary>
                When set to true the QueryCommand debugger creates an own instance the the Default database connection assumd by the type
                of the IDbCommand it contains
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.DebuggerQuery">
            <summary>
                Stores the exact executed query
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.SqlQuery">
            <summary>
                Provieds a Instant to use SQL query that Contains all Variables and querys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.StackTracer">
            <summary>
                Blocking if Stack Trace is not created
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DebuggerHelper.QueryDebugger.ParameterValue(System.Data.IDataParameter)">
            <summary>
            Formats the sp to string by using the DbType
            </summary>
            <param name="sp">The sp.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DebuggerHelper.QueryDebugger.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Manager.DbAccessLayer">
            <summary>
                Contanins some Helper mehtods for CRUD operation
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Config">
            <summary>
            Gets the current Config store this instance is attached to.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.ProviderCollection">
            <summary>
                Defines a set of Providers that are inclueded in this DLL or are weak refernced.
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer.DefaultAssertionObject">
            <summary>
                Object that is used globaly for each Equallity Comparsion if no other is specifyed ether for the type or the
                instance. This field overrides
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.LoadCompleteResultBeforeMapping">
            <summary>
                if set the created reader of an read operation will be completely stored then the open connection will be closed
                Default is true
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DefaultAssertionObjectRewrite">
            <summary>
                When specifying an Long as DefaultAssertionObject the PocoPkComparer will use instedt the value casted as int when
                the property is int instedt of Long and vice versa (more Rewrite operations may follow)
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Debugger">
            <summary>
                Enables the automatic creation of QueryDebugger objects on each created IDbCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.IsMultiProviderEnvironment">
            <summary>
                If set to True a strict check for the Targetdatabase Property on each Factory or provider specific method is done
                otherwise this Check is skiped
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DatabaseStrategy">
            <summary>
                For Internal Use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DbAccessType">
            <summary>
                Selected dbAccessType
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DefaultLookupPath">
            <summary>
                The default path for loading external Providers via DbAccessType
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Database">
            <summary>
                Current Database
                Can be used to write multi statements
                Is used for ALL NonStatic statments creators
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Manager.DbAccessType,System.String,JPB.DataAccess.Contacts.ILogger,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
                Create a DbAccessLayer that uses a Predefined type and Connection string
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(System.String,System.String,JPB.DataAccess.Contacts.ILogger,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
                Create a DbAccessLAyer with exernal Strategy
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Contacts.IDatabaseStrategy,JPB.DataAccess.Contacts.ILogger,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
                Create a DbAccessLayer with a new Database
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.Contacts.ILogger,JPB.DataAccess.DbInfoConfig.DbConfig)">
            <summary>
                Creates a DbAccessLayer with a new Database
                dbAccessType will be Guessed
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.GetClassInfo(System.Type)">
            <summary>
            Quick access to the underlying Config store
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CheckDatabase">
            <summary>
                Check for Availability
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Wraps a QueryCommand and its Paramters and then executes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.String,System.Object)">
            <summary>
                Wraps a QueryCommand and its Paramters from Dynamic and then executes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.Data.IDbCommand)">
            <summary>
                Execute a QueryCommand without Paramters
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Query">
            <summary>
                Creates a Strong typed query that awaits no Result
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord)">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Collections.Generic.Dictionary{System.Int32,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache})">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInstance(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Boolean@,System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Creates an instance based on a Ctor injection or Reflection loading
            	or when using a MsCoreLib type direct enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ReflectionPropertySet(JPB.DataAccess.DbInfoConfig.DbConfig,System.Object,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Collections.Generic.Dictionary{System.Int32,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache},System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Loads all propertys from a DataReader into the given Object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Delete``1">
            <summary>
                Creates and Executes a Standart SQL delete statement based on the Entry
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Delete``1(``0)">
            <summary>
                Creates and Executes a Standart SQL delete statement based on the Entry
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateDelete(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Object)">
            <summary>
            	Creates a Delete statement for the given entry
            </summary>
            <param name="db">The database.</param>
            <param name="classInfo">The class information.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Delete``1(``0,System.Object[])">
            <summary>
                Creates and Executes a Standart SQL delete statement based on the Entry
                uses factory Mehtod if availbile
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RaiseEvents">
            <summary>
                Should raise Instance bound Events
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RaiseStaticEvents">
            <summary>
                Should raise events (Performace critical!)
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnDelete">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Delete Statement.
                Will only be triggerd when setting RaiseEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnSelect">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Select Statement.
                Will only be triggerd when setting RaiseEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnUpdate">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Update Statement.
                Will only be triggerd when setting RaiseEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnInsert">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Insert Statement.
                Will only be triggerd when setting RaiseEvents to true
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer.DbTypeMap">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Map(System.Data.DbType)">
            <summary>
            Map an SourceDbType to the proper C# mscore lib type
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Map(System.Type)">
            <summary>
            Map an C# mscore lib type to the proper SourceDbType
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SProcedureDbAccessLayer">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedureNonResult``1(``0)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedureNonResult(System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedure``2(``0)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The result</typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedure(System.Type,System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedurePrimetiv(System.Type,System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RangerInsertPation">
            <summary>
                get the size of the Partition of the singel InsertStatements
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert(System.Type,System.Object)">
            <summary>
                Insert a
                <paramref name="entry" />
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert``1(``0)">
            <summary>
                Insert a
                <paramref name="entry" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates AutoStatements in the size of RangerInsertPation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsertRangeCommand``1(``0[])">
            <summary>
                Creates the Multi Insert statement based on the Ranger property
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsert(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Object)">
            <summary>
                Creates a single Insert Statement with the propertys of
                <paramref name="entry" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsert(System.Type,System.Object,System.Object[])">
            <summary>
                Creates a single insert statement for a
                <paramref name="entry" />
                uses
                <paramref name="parameter" />
                if possible
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsertWithSelectCommand(System.Type,System.Object)">
            <summary>
                Creates an insert command with appended LastInsertedIDCommand from the IDatabase interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertWithSelect(System.Type,System.Object)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertWithSelect``1(``0)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
                and selectes that
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.ProcessNavigationPropertys">
            <summary>
                If enabled Related structures will be loaded into the source object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object)">
            <summary>
                Execute select on a database with a standard Where [Primary Key] = <paramref name="pk" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object,System.Boolean)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object,System.Boolean)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object[])">
            <summary>
                Creates and Executes a Plain select over a
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object[])">
            <summary>
                Uses a Factory method to Generate a new set of T
                When no Factory is found an Reflection based Factory is used
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Boolean,System.Object[])">
            <summary>
                Creates and Executes a SelectStatement for a given
                <paramref name="type" />
                by using the
                <paramref name="parameter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Boolean)">
            <summary>
                Creates a selectStatement for a given
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Creates and Executes a Select Statement for a given
                <paramref name="type" />
                by using
                <paramref name="command" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
                Creates and Executes a Select Statement for
                <typeparam name="T"></typeparam>
                by using
                <paramref name="command" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.String)">
            <summary>
                Creates a Select with appended query
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(System.String)">
            <summary>
                Creates a Select with appended query
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Creates a Select with appended query and inclueded QueryCommand Paramater
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Creates a Select with appended query and inclueded QueryCommand Paramater
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.CheckFactoryArguments">
            <summary>
            Actives a check when any user arguments Provided via any overload that takes an
            <c>params object[]</c>
            that should be used for Factory Injections. If enabled and Factory arguments are provided but could not match to any Factory an
            <c>InvalidOperationExcpetion</c>
            will be thrown.
            Default is True
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Multipath">
            <summary>
            Activates Deadlock and Stackoverflow detection and Prevention.
            When an Stackoverflow inside any FactoryMethod is detected an other method for creating the statement is used as long as there are other options
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer._isIndented">
            <summary>
            For StackOverflow detection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.Object)">
            <summary>
                Creates a Select for one Item with appended query and inclueded QueryCommand Paramater
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(System.Object)">
            <summary>
                Creates a Select for one Item with appended query and inclueded QueryCommand Paramater
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type)">
            <summary>
                Creates a Plain Select statement by using
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String)">
            <summary>
                Creates a Plain Select statement by using
                <paramref name="classType" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelectByColumns(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String,System.String)">
            <summary>
                Creates a Plain Select statement by using
                <paramref name="classType" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunDynamicSelect(System.Type,System.Data.IDbCommand)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect(System.Type,System.Data.IDbCommand)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect``1(System.Data.IDbCommand)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes
                <paramref name="query" />
                and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes
                <paramref name="query" />
                and Parse the Output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String,System.Object)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String,System.Object)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses<paramref name="paramenter" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.Data.IDbCommand)">
            <summary>
                Runs
                <paramref name="command" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.LoadNavigationProps(System.Object)">
            <summary>
                ToBeSupported
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.Data.IDbCommand)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.Data.IDbCommand,System.Object)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteMARS(System.Data.IDbCommand,System.Type[])">
            <summary>
                Executes a IDbCommand that will return multibe result sets that will be parsed to the marsTypes in order they are
                provided
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Update``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Will update by using the CreateUpdate function
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Update``1(``0,System.Boolean)">
            <summary>
                Will Update by using the CreateUpdate function
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Refresh``1(``0)">
            <summary>
                Will create a new Object when
                T contains a Valid RowVersionAttribute property
                AND
                RowVersionAttribute property is not equals the DB version
                OR
                T does not contain any RowVersionAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RefreshKeepObject``1(``0)">
            <summary>
                Will update all propertys of entry when
                T contains a Valid RowVersionAttribute property
                AND
                RowVersionAttribute property is not equals the DB version
                OR
                T does not contain any RowVersionAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CheckRowVersion``1(``0)">
            <summary>
                Checks the Row version of the local entry and the server on
            </summary>
            <typeparam name="T"></typeparam>
            <returns>True when the version is Equals, otherwise false</returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateUpdate(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Object)">
            <summary>
            Create a Update statement that will update the entry in the Database
            </summary>
            <param name="database">The database.</param>
            <param name="classInfo">The class information.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
            <exception cref="T:System.Exception">No primarykey Provied. An autogenerated Update statement could not be created</exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateUpdate``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Will create an Update Statement by using a Factory or Autogenerated statements
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ValidateEntity(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ValidateEntityPk(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.TryValidateEntity(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:JPB.DataAccess.Manager.DatabaseActionHandler">
            <summary>
                A database operation is done
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.DatabaseFailedActionHandler">
            <summary>
                A database operation is failed
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.DbAccessType">
            <summary>
                Defines a Common set of DBTypes
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Experimental">
            <summary>
                For Developing
                Not itend for your use!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Unknown">
            <summary>
                default and undefined bevhaior
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.MsSql">
            <summary>
                Defines the MsSQL Type as a Target database
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.MySql">
            <summary>
                Defines the MySQL Type as a Target database
                Not as tested as the MsSQL type
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.OleDb">
            <summary>
                Defines the MsSQL Type as a Target database
                Not tested!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Obdc">
            <summary>
                Defines the MsSQL Type as a Target database
                Not Tested!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.SqLite">
            <summary>
                Defines the MsSQL Type as a Target database
                Not Tested
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.PreDefinedProviderCollection">
            <summary>
                A list that contains all kown Provider and there Basic implimentation
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.PreDefinedProviderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.PreDefinedProviderCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IQueryBuilder`1">
            <summary>
            Provides access to the interal query storage and enumeration Function
            </summary>
            <typeparam name="Stack"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ContainerObject">
            <summary>
            The interal value holder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ForResult``1">
            <summary>
            Enumerates the current query for a type <typeparamref name="E"/>
            </summary>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ChangeType``1">
            <summary>
            Wraps this query type to an new QueryElement
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IQueryContainer">
             <summary>
            
             </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.ForType">
            <summary>
            	Declares the Return type that is awaited
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AutoParameterCounter">
            <summary>
            	Gets the current number of used SQL Arguments
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.Parts">
            <summary>
            	Defines all elements added by the Add Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.EnumerationMode">
            <summary>
                Defines the Way how the Data will be loaded
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AllowParamterRenaming">
            <summary>
                If enabled Variables that are only used for parameters will be Renamed if there Existing multiple times
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AccessLayer">
            <summary>
            	Access to the underlying AccessLayer
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.Compile">
            <summary>
                Will concat all QueryParts into a statement and will check for Spaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.GetNextParameterId">
            <summary>
                Increment the counter +1 and return the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.CompileFlat">
            <summary>
                Compiles the QueryCommand into a String|IEnumerable of Paramameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.Clone">
            <summary>
            Clones this Container
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IQueryElement">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryBuilder" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IElementProducer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IIdentifyerElementQuery" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IOrderdElementProducer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IOrderdColumnElementProducer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IJoinQuery">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IIdentifyerElementQuery">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IIdentifyerElementQuery.CurrentIdentifier">
            <summary>
            Gets the current identifier.
            </summary>
            <value>
            The current identifier.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IConditionalQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IElementProducer`1" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IConditionalColumnQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IConditionalOperatorQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IConditionalEvalQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.ISelectQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IElementProducer`1" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IDbElementSelector">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IRootQuery" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IDbColumnSelector">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IRootQuery" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IUpdateQuery`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IElementProducer`1" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IRootQuery">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IInCteQuery">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryElement" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IIdentifyerElementQuery" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.INestedRoot">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IRootQuery" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IIdentifyerElementQuery" />
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IQueryBuilder">
             <summary>
            
             </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryBuilder.ContainerObject">
            <summary>
            The interal value holder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryBuilder.ForResult``1">
            <summary>
            Enumerates the current query for a type <typeparamref name="TE" />
            </summary>
            <typeparam name="TE"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.CteQueryPart">
            <summary>
                Maker for CTS in MSSQL
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.CteQueryPart.#ctor(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
            </summary>
            <param name="prefix"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:JPB.DataAccess.Query.CteQueryPart.#ctor(System.String)">
            <summary>
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="T:JPB.DataAccess.Query.EnumerationMode">
            <summary>
                Enum for specifying the way in enumeration that is used by enumerating a IQueryContainer
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.EnumerationMode.FullOnLoad">
            <summary>
                At the first call of GetEnumerator all items will be enumerated and stored
                Eager loading
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.EnumerationMode.OnCall">
            <summary>
                Will bypass the current Complete loading logic and forces the DbAccessLayer to use a
                Lazy loading
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.InternalContainerContainer">
            <summary>
            Stores the Query data produced by an QueryBuilder element
            </summary>
            <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryContainer" />
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AccessLayer">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.ForType">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.#ctor(JPB.DataAccess.Manager.DbAccessLayer,System.Type)">
            <summary>
                Creates a new Instance of an QueryCommand Builder that creates Database aware querys
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Creates a new Instance of an QueryText Builder that creates Database aware querys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AutoParameterCounter">
            <summary>
            Gets the current number of used SQL Parameter. This value is used for Autogeneration
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.Parts">
            <summary>
            Defines all elements added by the Add Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.EnumerationMode">
            <summary>
            Defines the Way how the Data will be loaded
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AllowParamterRenaming">
            <summary>
            If enabled Variables that are only used for parameters will be Renamed if there Existing multiple times
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AutoLinebreak">
            <summary>
                If enabled the IQueryContainer will insert linebreaks after some Commands
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Compile">
            <summary>
            Will concat all QueryParts into a statement and will check for Spaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Execute">
            <summary>
                Executes a query without result parsing
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.WithEnumerationMode(JPB.DataAccess.Query.EnumerationMode)">
            <summary>
                QueryCommand like setter for WithEnumerationMode
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.WithParamterRenaming(System.Boolean)">
            <summary>
                QueryCommand like setter for AllowParamterRenaming [Duplicate]
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.CompileFlat">
            <summary>
            Compiles the QueryCommand into a String|IEnumerable of Paramameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.GetNextParameterId">
            <summary>
            Increment the counter +1 and return the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.SetAutoRenaming(System.Boolean)">
            <summary>
                QueryCommand like setter for AllowParamterRenaming
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Render">
            <summary>
                Renders the Current Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Clone">
            <summary>
            Clones this Container
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IConditionalColumnQuery`1" />
        </member>
        <member name="F:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.State">
            <summary>
            The state of the current bilder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,JPB.DataAccess.Query.Operators.Conditional.CondtionBuilderState)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.Is">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.Is(System.Object)">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.Not(System.Object)">
            <summary>
            Defines an condition that should be inverted
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.IsQueryOperatorValue(System.String)">
            <summary>
            Prepaires an Conditional Query
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.QueryOperatorValue(System.String,System.Object)">
            <summary>
            Prepaires an Conditional Query
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.IsQueryValue(System.String)">
            <summary>
            Prepaires an Conditional Query
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery`1.NotQueryValue(System.String)">
            <summary>
            Defines an condition that should be inverted
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IConditionalEvalQuery`1" />
        </member>
        <member name="F:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1.State">
            <summary>
            The current query state
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,JPB.DataAccess.Query.Operators.Conditional.CondtionBuilderState)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1.And">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1.Or">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalEvalQuery`1.ParenthesisClose">
            <summary>
            Closes an Parenthesis if any is open. When not leading ( is found noting happens
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IConditionalOperatorQuery`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,JPB.DataAccess.Query.Operators.Conditional.CondtionBuilderState)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1"/> class.
            </summary>
            <param name="builder">The builder.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.Not">
            <summary>
            Defines an condition that should be inverted
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.In``1(``0[])">
            <summary>
            Adds an IN or NOT BEWEEN statement for the given collection of values
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.Between(System.Object,System.Object)">
            <summary>
            Creates a BETWEEN or NOT BETWEEN statement for <paramref name="valueA"/> and <paramref name="valueB"/>
            </summary>
            <param name="valueA">The value a.</param>
            <param name="valueB">The value b.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.Like(System.String)">
            <summary>
            Creates a LIKE statement with an full whildcard %value%
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.EndWith(System.String)">
            <summary>
            Creates a LIKE statement with an ending whildcard value%
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.StartWith(System.String)">
            <summary>
            Creates a LIKE statement with a starting whildcard %value
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.BiggerThen(System.Object)">
            <summary>
            Creates a Conditonal Bigger or Smaller as Statement
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.SmallerThen(System.Object)">
            <summary>
            Creates a Conditonal Bigger or Smaller as Statement
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.EqualsTo(System.Object)">
            <summary>
            Creates a statement that will check the Column for equality or not
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.EqualsTo``1(JPB.DataAccess.Query.Operators.ElementProducer{``0})">
            <summary>
            Creates an Equal to statement by using a subquery
            </summary>
            <typeparam name="TGPoco">The type of the g poco.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Invalid value</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.QueryOperatorValue``1(System.String,JPB.DataAccess.Query.Operators.ElementProducer{``0})">
            <summary>
            Prepaires an Conditional Query
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery`1.QueryOperatorValue(System.String,System.Object)">
            <summary>
            Prepaires an Conditional Query
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalQuery`1.Parenthesis">
            <summary>
            Opens a new Logical combined Query
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalQuery`1.Alias(System.String)">
            <summary>
                Adds a SQL WHERE statement
            	does not emit any conditional statement
            	should be followed by Column()
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalQuery`1.Column(System.String)">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Conditional.ConditionalQuery`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Conditional.Operator">
             <summary>
            
             </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.Operators.Conditional.Operator.Is">
            <summary>
            Is the value equals to the other
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.Operators.Conditional.Operator.Not">
            <summary>
            Is the value not equals to the other
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.ElementProducer`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IElementProducer`1" />
             <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" /> class.
            </summary>
            <param name="database">The database.</param>
            <param name="currentIdentifier">The current identifier.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" /> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.SetCache">
            <summary>
            Sets the cache.
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.Operators.ElementProducer`1.Cache">
            <summary>
            Easy access to the Cache for TPoco
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.ForResult">
            <summary>
            Executes the Current QueryBuilder by setting the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.ForPagedResult(System.Int32,System.Int32)">
            <summary>
            Executes the Current QueryBuilder by setting the type
            </summary>
            <param name="page">The page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.Where">
            <summary>
            Adds a SQL WHERE statement
            does not emit any conditional statement
            should be followed by Column()
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.Alias(System.String)">
            <summary>
            Adds a SQL WHERE statement
            does not emit any conditional statement
            should be followed by Column()
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.Order">
            <summary>
            Adds an SQL ORDER BY Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:JPB.DataAccess.Query.Operators.ElementProducer`1.CurrentIdentifier">
            <summary>
            Gets the current identifier in the query.
            </summary>
            <value>
            The current identifier.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.ElementProducer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IOrderdColumnElementProducer`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1.Order(System.Boolean)">
            <summary>
            Creates an Order By statement that is ether Ascending or Descending
            </summary>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1.Descending">
            <summary>
            returns an Descending orderd collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1.ThenBy(System.String)">
            <summary>
            Appents another order statement
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderByColumn`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <typeparam name="TA">The type of a.</typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Orders.OrderStatementQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IOrderdElementProducer`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderStatementQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Orders.OrderStatementQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderStatementQuery`1.By(System.String)">
            <summary>
            Uses
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Orders.OrderStatementQuery`1.By``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Prepaires an Conditional Query that targets an single Column
            </summary>
            <typeparam name="TA">The type of a.</typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.RootQuery.Execute``1(System.Object[])">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.RootQuery.Select">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.RootQuery.Select``1(System.Object[])">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.RootQuery.Distinct``1">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.RootQuery.Update``1(``0)">
            <summary>
                Adds a Update - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IDbColumnSelector" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="columns">The columns.</param>
            <param name="currentIdentifier">The current identifier.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selectes a column based on a Propertie
            </summary>
            <typeparam name="TA">The type of a.</typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1.Column(System.String)">
            <summary>
            Selectes a column based on a name
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.ColumnChooser`1.From">
            <summary>
            Creates a Select statement that only query the columns that are previusly collected
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IDbElementSelector" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="currentIdent">The current ident.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector.Alias(System.String)">
            <summary>
            Changes the current Identitfyer
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector.Table``1(System.Object[])">
            <summary>
            Creates a Select statement for a given Poco
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="argumentsForFactory">The arguments for factory.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">argumentsForFactory</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.Selection.DatabaseObjectSelector.Only``1">
            <summary>
            Creates an Column Chooser object to spezify columns to select
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.SelectQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.Operators.ElementProducer`1" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.ISelectQuery`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.SelectQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.SelectQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.SelectQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.SelectQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="ident">The ident.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.SelectQuery`1.In``1(``0)">
            <summary>
            Retuns a collection of all Entites that are referenced by element
            Needs a proper ForginKeyDeclartaion
            </summary>
            <typeparam name="TEPoco"></typeparam>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.SelectQuery`1.In``1(System.Object)">
            <summary>
            Retuns a collection of all Entites that are referenced by element
            Needs a proper ForginKeyDeclartaion
            </summary>
            <typeparam name="TEPoco"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.Operators.UpdateQuery`1">
             <summary>
            
             </summary>
             <typeparam name="TPoco">The type of the poco.</typeparam>
             <seealso cref="T:JPB.DataAccess.Query.QueryBuilderX" />
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IUpdateQuery`1" />
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.UpdateQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.UpdateQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="currentIdentifier">The current identifier.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.UpdateQuery`1.#ctor(JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.Operators.UpdateQuery`1"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.UpdateQuery`1.Alias(System.String)">
            <summary>
            Changes the generated Identifier
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.Operators.UpdateQuery`1.Where">
            <summary>
                Adds a SQL WHERE statement
            	does not emit any conditional statement
            	should be followed by Column()
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Query.Operators.UpdateQuery`1.CurrentIdentifier">
            <summary>
            Gets the current identifier.
            </summary>
            <value>
            The current identifier.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryBuilderX">
             <summary>
            
             </summary>
             <seealso cref="T:JPB.DataAccess.Query.Contracts.IQueryBuilder" />
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderX.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Creates a new Query
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderX.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderX.Append(JPB.DataAccess.Query.QueryBuilderX)">
            <summary>
            Appends the specified query Builder.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Query.QueryBuilderX.ContainerObject">
            <summary>
            The interal value holder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderX.ForResult``1">
            <summary>
                Executes the Current QueryBuilder by setting the type
            </summary>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderX.GetEnumerator``1">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.MsQueryBuilderExtentions">
            <summary>
            Provieds A set of extentions for Microsoft SQL Serve
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SetVariable(JPB.DataAccess.Query.Operators.RootQuery,System.String,System.Object)">
            <summary>
            Sets an Variable to the given value
            </summary>
            <param name="query">The query.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.DeclareVariable(JPB.DataAccess.Query.Operators.RootQuery,System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Declares a new Variable of the Given SQL Type by using its length
            </summary>
            <param name="query">The query.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.WithCteForType(JPB.DataAccess.Query.Operators.RootQuery,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a Common Table Expression that selects a Specific type
            </summary>
            <param name="query">The query.</param>
            <param name="target">The target.</param>
            <param name="cteName">Name of the cte.</param>
            <param name="useStarOperator">if set to <c>true</c> [use star operator].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.ForXml``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.Type)">
            <summary>
            Creates a FOR XML statement that uses the name of the given type to allow the .net XML Serilizer to read the output
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.WithCte(JPB.DataAccess.Query.Operators.RootQuery,System.String,System.Action{JPB.DataAccess.Query.Operators.RootQuery},System.Boolean)">
            <summary>
            Creates a Common Table Expression that selects a Specific type
            </summary>
            <param name="query">The query.</param>
            <param name="cteName">Name of the cte.</param>
            <param name="cteAction">The cte action.</param>
            <param name="subCte">if set to <c>true</c> [sub cte].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.AsCte``2(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String,System.Boolean)">
            <summary>
            Creates a Common Table Expression that selects a Specific type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TN">The type of the n.</typeparam>
            <param name="query">The query.</param>
            <param name="cteName">Name of the cte.</param>
            <param name="subCte">if set to <c>true</c> [sub cte].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SubSelect``1(JPB.DataAccess.Query.Operators.RootQuery,System.Action{JPB.DataAccess.Query.Operators.SelectQuery{``0}})">
            <summary>
            Creates an closed sub select
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="subSelect">The sub select.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SelectStar``1(JPB.DataAccess.Query.Operators.RootQuery)">
            <summary>
            Creates a QueryCommand that uses the * Operator to select all date from the inner query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Between``1(JPB.DataAccess.Query.Operators.Conditional.ConditionalOperatorQuery{``0},System.Action{JPB.DataAccess.Query.Operators.RootQuery},System.Action{JPB.DataAccess.Query.Operators.RootQuery})">
            <summary>
            Adds a between statement followed by a query defined in <paramref name="valA" /> folowed by an and statement and
            an secound query defined in the <paramref name="valB" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="valA">The value a.</param>
            <param name="valB">The value b.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Apply(JPB.DataAccess.Query.Operators.RootQuery,JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode,System.Action{JPB.DataAccess.Query.Operators.RootQuery})">
            <summary>
            Creates an TSQL Apply statement
            </summary>
            <param name="query">The query.</param>
            <param name="mode">The mode.</param>
            <param name="innerText">The inner text.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Apply``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode,System.Action{JPB.DataAccess.Query.Operators.RootQuery})">
            <summary>
            Creates an TSQL Apply statement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="mode">The mode.</param>
            <param name="innerText">The inner text.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.As``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String)">
            <summary>
            Append an AS part
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Contains``1(JPB.DataAccess.Query.Operators.Conditional.ConditionalColumnQuery{``0},System.Object)">
            <summary>
            Append an Contains part
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.RowNumberOrder``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String,System.Boolean)">
            <summary>
            Append an RowNumberOrder part
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="over">The over.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join``3(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String)">
            <summary>
            Adds a LEFT JOIN to the Statement
            </summary>
            <typeparam name="TLeft">The type of the left.</typeparam>
            <typeparam name="TRight">The type of the right.</typeparam>
            <typeparam name="TAggregation">The type of the aggregation.</typeparam>
            <param name="query">The query.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join``3(JPB.DataAccess.Query.Operators.ElementProducer{``0},JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode)">
            <summary>
            Adds a JOIN to the Statement
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <typeparam name="TAggregation">The type of the aggregation.</typeparam>
            <param name="query">The query.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Top``1(JPB.DataAccess.Query.Operators.RootQuery,System.UInt32)">
            <summary>
            Inserts a TOP statement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="top">The top.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">For the Selected DB type is no Top implementations Available</exception>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Count``1(JPB.DataAccess.Query.Operators.RootQuery)">
            <summary>
            Creates an TSQL Count(1) statement
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.CountLong``1(JPB.DataAccess.Query.Contracts.IElementProducer{``0})">
            <summary>
            Creates an TSQL Count(1) statement
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.CountInt``1(JPB.DataAccess.Query.Contracts.IElementProducer{``0})">
            <summary>
            Creates an TSQL Count(1) statement
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.CountShort``1(JPB.DataAccess.Query.Contracts.IElementProducer{``0})">
            <summary>
            Creates an TSQL Count(1) statement
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Count``2(JPB.DataAccess.Query.Contracts.IElementProducer{``0})">
            <summary>
            Creates an TSQL Count(1) statement
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.OrderBy``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String)">
            <summary>
            Creates an TSQL OrderBy statment
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <param name="over">The over.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.OrderBy``2(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Creates an TSQL OrderBy statment
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <param name="query">The query.</param>
            <param name="columnName">Name of the column.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.OrderByDesc``1(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.String)">
            <summary>
            Creates an TSQL OrderBy statment
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <param name="query">The query.</param>
            <param name="over">The over.</param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.OrderByDesc``2(JPB.DataAccess.Query.Operators.ElementProducer{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Creates an TSQL OrderBy statment
            </summary>
            <typeparam name="TPoco">The type of the poco.</typeparam>
            <typeparam name="TE">The type of the e.</typeparam>
            <param name="query">The query.</param>
            <param name="columnName">Name of the column.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode" /> class.
            </summary>
            <param name="joinType">Type of the join.</param>
        </member>
        <member name="P:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode.JoinType">
            <summary>
            QueryCommand string
            </summary>
            <value>
            The type of the join.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode" /> class.
            </summary>
            <param name="applyType">Type of the apply.</param>
        </member>
        <member name="P:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode.ApplyType">
            <summary>
            QueryCommand string
            </summary>
            <value>
            The type of the apply.
            </value>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryBuilderExtentions">
             <summary>
            
             </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Add``1(``0,JPB.DataAccess.Query.GenericQueryPart)">
            <summary>
                Adds a QueryCommand part to the Local collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryQ``1(``0,System.String,JPB.DataAccess.Contacts.IQueryParameter[])">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryD``1(``0,System.String,System.Object)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryD``1(``0,System.String)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryCommand``1(``0,System.Data.IDbCommand)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryText``1(``0,System.String,System.Object[])">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.InBracket``1(``0,System.Action{``0})">
            <summary>
                Inserts and Appends brackets after the delegate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.AsPager``1(JPB.DataAccess.Query.Contracts.IQueryContainer,System.Int32)">
            <summary>
                Wraps the Existing command into a DataPager for the underlying Database
                <example>
                </example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.AsPagerViewModel``2(JPB.DataAccess.Query.Contracts.IQueryContainer,System.Int32)">
            <summary>
                Wraps the Existing command into a DataPager for the underlying Database
                <example>
                </example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.WithParamerters``1(``0,System.Object)">
            <summary>
                Adds Parameter to the QueryCommand object without adding a Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryEagerEnumerator.Load">
            <summary>
                Mehtod for async loading this will bring us some m secs
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryLazyEnumerator">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.GenericQueryPart">
            <summary>
                Wrapper for Generic QueryCommand parts
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.#ctor(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter},JPB.DataAccess.Query.Contracts.IQueryBuilder)">
            <summary>
                Creates a generic query part that can be used for any query
            </summary>
            <param name="prefix"></param>
            <param name="parameters"></param>
            <param name="builder">The type of building object</param>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.#ctor(System.String)">
            <summary>
                Creates a generic query part that can be used for any query
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="P:JPB.DataAccess.Query.GenericQueryPart.Prefix">
            <summary>
                The Partial SQL QueryCommand that is contained inside this part
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.GenericQueryPart.QueryParameters">
            <summary>
                If used the Parameters that are used for this Prefix
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.GenericQueryPart.Builder">
            <summary>
            Gets the Query builder element.
            </summary>
            <value>
            The builder.
            </value>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.FromCommand(System.Data.IDbCommand,JPB.DataAccess.Query.Contracts.IQueryElement)">
            <summary>
                Wrapps the given <paramref name="command" /> into a new QueryPart by storing its QueryCommand statement and parameter
            </summary>
            <param name="command"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Render">
            <summary>
                For display
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Render(JPB.DataAccess.Helper.StringBuilderInterlaced)">
            <summary>
                For display
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.TJoinMode">
            <summary>
                Jon modes for TSQL. This is an helper method that can be used to create JOINs by using the QueryCommand Builder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.TJoinMode.GetJoins">
            <summary>
                Returns a list of all Join values known be the system
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.TApplyMode">
            <summary>
            Apply modes for TSQL. This is an helper method that can be used to create APPLYs by using the QueryCommand Builder
            </summary>
            <seealso cref="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode" />
        </member>
        <member name="F:JPB.DataAccess.Query.TApplyMode.Outer">
            <summary>
            Defines an TSQL Outer Apply statement
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.TApplyMode.Cross">
            <summary>
            Defines an TSQL Cross Apply statement
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.TApplyMode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JPB.DataAccess.Query.TApplyMode"/> class.
            </summary>
            <param name="applyType">Type of the apply.</param>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DataAccessAttribute">
            <summary>
                Base type for all maker Attributes
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DbAccessTypeAttribute">
            <summary>
            Defines an function or property that is specific for an single database
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.DbAccessTypeAttribute.TargetDatabase">
            <summary>
            Defines the Target database this Method creates an Script for
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute">
            <summary>
            	Sets an type to be associated with the current class.
            	TO BE SUPPORTED
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute.#ctor(System.Type)">
            <summary>
            Allows to create a proxy class that should contains Factory methods for the current class
            </summary>
            <param name="methodProxy"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute.MethodProxy">
            <summary>
            	The assocaiated type
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute">
            <summary>
                Marks this class to be allowed by the Framework for the CodeDOM Ado.net ctor creation
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.#ctor">
            <summary>
            Creates a new Instance without any Meta Infos
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.CtorGeneratorMode">
            <summary>
            Tells the framework how a factory for this class should be created
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.FullSateliteImport">
            <summary>
            If set to true all Assemblys that are used inside the base Assembly will be imported to the new one
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode">
            <summary>
            Defines how an Constructor should be created
            </summary>
        </member>
        <member name="F:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode.Inhert">
            <summary>
            Use and inherted class and set Propertys in its super Constructor. A Proxy will be created
            </summary>
        </member>
        <member name="F:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode.FactoryMethod">
            <summary>
            Should be used when the Constructor is private or class is sealed. No Proxy created
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorNamespaceAttribute">
            <summary>
            Adds a namespace to the generated class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorNamespaceAttribute.#ctor(System.String)">
            <summary>
            Creates a new Attribute that is used for CodeGeneration
            This Attributes tell the factory to include certain namespaces.
            
            </summary>
            <param name="usedNamespace"></param>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ConfigMehtodAttribute">
            <summary>
                When a methode is marked with this attribute it can be used to configurate the current class. Must be public static
                void
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DeleteFactoryMethodAttribute">
            <summary>
                Marks a Method as an Factory mehtod
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ObjectFactoryMethodAttribute">
            <summary>
                Marks a ctor or a Method as an Factory method
                The ctor must have only one param that is of type IDataRecord
                The Method must have only one param that is of type IDataRecord and returns a new Instance
                The Method must be static
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.SelectFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.InsertFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.UpdateFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute">
            <summary>
                Provieds a QueryCommand ( parametes not used ) for selection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.#ctor(System.String)">
            <summary>
                Ctor
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.Query">
            <summary>
                The Select QueryCommand that are used for selection of this Class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.Parameters">
            <summary>
                Not in USE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute">
            <summary>
                Provieds a QueryCommand ( parametes not used ) for selection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.#ctor(System.String)">
            <summary>
                ctor
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.Query">
            <summary>
                The Select QueryCommand that are used for selection of this Class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.Parameters">
            <summary>
                Not in USE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.InsertIgnoreAttribute">
            <summary>
                Ignores this Property when creating an Update or Insert statement
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForeignKeyAttribute">
            <summary>
                Indicates this Property to be resolved by a ForeignKey column
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyAttribute.KeyName">
            <summary>
                The name of the Column that should be used
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute">
            <summary>
                Indicates this Property to be resolved as a ForeignKey column
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignKey">
            <summary>
            The Key on the Foreign table
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignTable">
            <summary>
            Table name of the Foreign constraint
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignType">
            <summary>
            The type of the table that is declared by ForginTable
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.#ctor(System.String,System.String)">
            <summary>
            Declares a new Foreign key constraint
            </summary>
            <param name="foreignKey"></param>
            <param name="foreignTable"></param>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.#ctor(System.String,System.Type)">
            <summary>
            Declares a new Foreign key constraint
            </summary>
            <param name="foreignKey"></param>
            <param name="foreignTable"></param>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.PrimaryKeyAttribute">
            <summary>
                Indicates that this property is a Primary key
                Requert for Selection over PK
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForModelAttribute">
            <summary>
                Allows renaming of the local class name to any name and the mapping from that name to the Db Table name
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForModelAttribute.#ctor(System.String)">
            <summary>
                Creates a new Instance of ForModelAttribute
            </summary>
            <param name="alternatingName" />
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForModelAttribute.AlternatingName">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.RowVersionAttribute">
            <summary>
                A rowstate that is used to Detect a newer version
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.IgnoreReflectionAttribute">
            <summary>
                Marks a property to be ignored by the complete searching logic
                Experimental
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.LoadNotImplimentedDynamicAttribute">
            <summary>
                Marks the property that will be used to hold all non existing Columns
                Must be of Type <code>IDictionary string Object</code>
                Only for Automatik Loading
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute">
            <summary>
                Adds a Converter that is used to convert from an DB object to an C# object
                The Converter must inhert from
                ModelAnotations.IValueConverter
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.#ctor(System.Type)">
            <summary>
            </summary>
            <param name="converter" />
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.#ctor(System.Type,System.Object)">
            <summary>
            </summary>
            <param name="converter" />
            <param name="parameter" />
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.Parameter">
            <summary>
                A static object that will be given to the Paramether
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.FromXmlAttribute">
            <summary>
                Marks a Property as XML Serilized
                If marked the output field from the query will be Serlized to the given object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.FieldName">
            <summary>
                The name of the Field inside the result stream
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.LoadStrategy">
            <summary>
                Specifiys the Strategy that is used to load the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.LoadFromXmlStrategy">
            <summary>
                if set the type will be used to define a user logic for the Serialization process
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.StoredProcedureAttribute">
            <summary>
                Marks a class as a StoredPrecedure wrapper
                if the marked class contains a Generic Arguement
                The result stream from the Select Statement will be parsed into the generic arguement
            </summary>
        </member>
        <member name="T:JPB.DataAccess.QueryFactory.QueryFactoryResult">
            <summary>
                Wraps a query and its Paramters into one single Object.
                Can be returned by an Factory on an POCO
            </summary>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(JPB.DataAccess.Query.Contracts.IQueryContainer)">
            <summary>
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(System.String)">
            <summary>
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(System.String,JPB.DataAccess.Contacts.IQueryParameter[])">
            <summary>
            </summary>
            <param name="query"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:JPB.DataAccess.QueryFactory.QueryFactoryResult.Query">
            <summary>
                The SQL QueryCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.QueryFactory.QueryFactoryResult.Parameters">
            <summary>
                All used Parameters
            </summary>
        </member>
    </members>
</doc>
