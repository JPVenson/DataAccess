<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JPB.DataAccess</name>
    </assembly>
    <members>
        <member name="T:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.LastExecutedQuery">
            <summary>
                Get the last Executed QueryCommand wrapped by a Debugger
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.TransactionRollback">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
                Executes a query against the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.DefaultDatabaseAccess.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
                executes the query against the database and wrapps all params by using a counter. First param @0,@1,@n
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.EgarDataRecord">
            <summary>
            Provides an IDataRecord Access that enumerates the Source record
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.#ctor(System.Data.IDataRecord)">
            <summary>
            Enumerates all items in the source record
            </summary>
            <param name="sourceRecord"></param>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.EgarDataRecord.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new Eagar recrod based on an Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql">
            <summary>
                Wrapps MsSQL spezifc data
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSql.CommandAsMsSql(System.Data.IDbCommand)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.TargetType">
            <summary>
                Internal Use
            </summary>
        </member>
        <member name="E:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.NewPageLoading">
            <summary>
                Raised if new Page is loading
            </summary>
        </member>
        <member name="E:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.NewPageLoaded">
            <summary>
                Raised if new page is Loaded
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.SyncHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.RaiseNewPageLoaded">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlUntypedDataPager`1.RaiseNewPageLoading">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2">
            <summary>
                Converts all items from T to TE
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.AdoWrapper.MsSqlProvider.MsSqlDataConverterPager`2.RaiseEvents">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.AdoWrapper.XmlDataRecord">
            <summary>
            This is an Helper for reading Xml Based columns in a way as a Ado.net Constructor is written
            </summary>
        </member>
        <member name="M:JPB.DataAccess.AdoWrapper.XmlDataRecord.TryParse(System.String,System.Type,System.Boolean)">
            <summary>
                This is our standart solution for Seriliation
                takes care of the loader strategy
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Contacts.ILocalDbConstraint.Name">
            <summary>
            The name of this Constraint
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalDbConstraint.CheckConstraint(System.Object)">
            <summary>
            The function that checks if the certain constraint is fulfilled
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider">
            <summary>
            Contains logic for generating primary key values that are used by the LocalDbRepro
            Per Instance of LocalTable
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider.GeneratingType">
            <summary>
            Type contract what type this generator is for
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider.GetNextValue">
            <summary>
            Generate a new Uniq primary key that has the type of GeneratingType
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider.GetUninitilized">
            <summary>
            Gets the object that indicates an Non Init primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider.Clone">
            <summary>
            This should return a new Instance of the current ILocalPrimaryKeyValueProvider with resetted internal PK counter
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILogger">
            <summary>
            Defines mehtods for Logging
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes one or more chars to the output by using string.Format
            </summary>
            <param name="content"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes one or more chars to the output by using string.Format followed by an Enviroment.NewLine
            </summary>
            <param name="content"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.ArgumentName">
            <summary>
            The name of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.Type">
            <summary>
            The type of this Param
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.Attributes">
            <summary>
            All Attached Attributes
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodArgsInfoCache`1.ParameterInfo">
            <summary>
            Direct reflection
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache">
            <summary>
            Contains all Infos about an Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.Attribute">
            <summary>
            	Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.AttributeName">
            <summary>
            	Uniqe ID for the Attribute [ToBeSupported]
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IAttributeInfoCache.Init(System.Attribute)">
            <summary>
            Internal use Only
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5">
            <summary>
            
            </summary>
            <typeparam name="TProp"></typeparam>
            <typeparam name="TAttr"></typeparam>
            <typeparam name="TMeth"></typeparam>
            <typeparam name="TCtor"></typeparam>
            <typeparam name="TArg"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Init(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Propertys">
            <summary>
                All Propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Attributes">
            <summary>
                All Attributes on class level
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Mehtods">
            <summary>
                All Mehtods
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache`5.Constructors">
            <summary>
                All Constructors
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache">
            <summary>
            Defines the most basic infos about an class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache.ClassName">
            <summary>
                The .net ClassName
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IClassInfoCache.Type">
            <summary>
                The .net Type instance
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IConstructorInfoCache`2">
            <summary>
            Holts all infos about an Constructor
            </summary>
            <typeparam name="TAtt"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Delegate">
            <summary>
                if set this method does not exist so we fake it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.MethodInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.MethodName">
            <summary>
                The name of the method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Attributes">
            <summary>
                All Attributes on this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Arguments">
            <summary>
            Arguments for this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.UseILWrapper">
            <summary>
            When set to true, an IL Wrapper is used inside the Invoke method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IMethodInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.SetterDelegate">
            <summary>
                the type of the Setter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.GetterDelegate">
            <summary>
                the type of the Getter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Setter">
            <summary>
                The Setter mehtod can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Getter">
            <summary>
                The Getter Method can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyType">
            <summary>
                The return type of the property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.PropertyName">
            <summary>
                The name of the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Attributes">
            <summary>
                All Attributes on this Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.MetaApi.IPropertyInfoCache`1.Init(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Sets all propertys on this instance
            </summary>
            <param name="propertyInfo"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IDatabase">
            <summary>
                Database wrapper interface
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.TargetDatabase">
            <summary>
                Defines the Target database we are conneting to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.IsAttached">
            <summary>
                NotImp
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.ConnectionString">
            <summary>
                Get the Current Connection string
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.DatabaseFile">
            <summary>
                If local instance get the file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.DatabaseName">
            <summary>
                Get the Database name that we are connected to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.ServerName">
            <summary>
                Get the Server we are Connected to
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabase.LastExecutedQuery">
            <summary>
                Get the last Executed QueryCommand wrapped by a Debugger
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreatePager``1">
            <summary>
                Get Database specific Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreatePager``2">
            <summary>
                Get database specific converter Datapager
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Attach(JPB.DataAccess.Contacts.IDatabaseStrategy)">
            <summary>
                Required
                Is used to attach a Strategy that handles certain kinds of Databases
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetConnection">
            <summary>
                Required
                Is used to create an new Connection based on the Strategy and
                keep it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetTransaction">
            <summary>
                Required
                Is used to create an new Transaction based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Connect(System.Nullable{System.Data.IsolationLevel})">
            <summary>
                Required
                When a new Connection is requested this function is used
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CloseConnection">
            <summary>
                Required
                Closing a open Connection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetlastInsertedID">
            <summary>
                Required
                Return the last inserted id based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreateCommand(System.String,System.Data.IDataParameter[])">
            <summary>
                Required
                Creates a Command based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.CreateParameter(System.String,System.Object)">
            <summary>
                Required
                Creates a Parameter based on the Strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetEntitiesList``1(System.String,System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
                Required
                Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.GetEntitiesList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
                Required
                Execute a QueryCommand and map the result that is created with the func
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Run(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.Run``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction(System.Action{JPB.DataAccess.Contacts.IDatabase},System.Data.IsolationLevel)">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.RunInTransaction``1(System.Func{JPB.DataAccess.Contacts.IDatabase,``0})">
            <summary>
                Required
                Opens a Connection or reuse an existing one and then execute the action
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
                Formarts a Command to a executable QueryCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabase.ConvertParameter(System.Data.DbType)">
            <summary>
                Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.SourceDatabase">
            <summary>
                Defines the database type this Strategy is used for
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.ConnectionString">
            <summary>
                An Valid Connection string for the given Strategy
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.DatabaseFile">
            <summary>
                Optional used when connecting to a Local file
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IDatabaseStrategy.ServerName">
            <summary>
                Should return the current database if availibe
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.CreateConnection">
            <summary>
                Creates a new Provider specific Connection that will held open until all actors want to close it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.FormartCommandToQuery(System.Data.IDbCommand)">
            <summary>
                Formarts a Command into a QueryCommand after the Strategy rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IDatabaseStrategy.ConvertParameter(System.Data.DbType)">
            <summary>
                Converts the Generic SourceDbType to the Specific represntation
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IQueryParameter">
            <summary>
                Wraps Paramters for Commands
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.Name">
            <summary>
            The name of this Paramether with or without leeding @
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.Value">
            <summary>
            The Real value that is given to Ado.net
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.SourceType">
            <summary>
            In Certain cases ( as when using an NvarBinary column in MSSQL ) it is nessesary to declare the column type explicid
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryParameter.SourceDbType">
            <summary>
            The from SourceType resultung SourceDbType
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IValueConverter">
            <summary>
                Converts values from DB to C# and back
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value from a DB to a C# object
            </summary>
            <returns>C# object that is of type of property</returns>
        </member>
        <member name="M:JPB.DataAccess.Contacts.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts a value from a C# object to the proper DB eqivaluent
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.ILoadFromXmlStrategy">
            <summary>
                Used to load a Xml based Entry from a xml text
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.ILoadFromXmlStrategy.LoadFromXml(System.String)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Contacts.LoadStrategy">
            <summary>
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Contacts.LoadStrategy.IncludeInSelect">
            <summary>
                Tells the API to include the field name into a Requested Select
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Contacts.LoadStrategy.NotIncludeInSelect">
            <summary>
                Tells the API that the field should be loaded Implizit
                If you do select the field with your own statement the xml will not be parsed
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IDataPager">
            <summary>
                Base pager
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.Cache">
            <summary>
                Not Implimented
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.RaiseEvents">
            <summary>
                Should raise Events
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.AppendedComands">
            <summary>
                Commands that are sequencely attached to the main pager command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.CurrentPage">
            <summary>
                Id of Current page beween 0 and MaxPage
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.MaxPage">
            <summary>
                The last possible Page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.PageSize">
            <summary>
                Items to load on one page
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.CurrentPageItems">
            <summary>
                Additional Commands to append to the base load command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager.SyncHelper">
            <summary>
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Contacts.Pager.IDataPager.NewPageLoading">
            <summary>
                Raised if new Page is loading
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Contacts.Pager.IDataPager.NewPageLoaded">
            <summary>
                Raised if new Page is loaded
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Contacts.Pager.IDataPager.LoadPage(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Loads the PageSize into CurrentPageItems
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IDataPager`1">
            <summary>
                Generic Data pager
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager`1.CurrentPageItems">
            <summary>
                Additional Commands to append to the base load command
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IDataPager`1.BaseQuery">
            <summary>
                The most simple Select that produces result data. An aditional QueryCommand will wrap to enable Pageing, this so be aware
                of it
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2">
            <summary>
                A wrapper interface to convert all incomming items from Load method into new type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2.Converter">
            <summary>
                Function to convert all items from T to TE
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.Pager.IWrapperDataPager`2.CurrentPageItems">
            <summary>
                new Collection of TE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Contacts.IQueryFactoryResult">
            <summary>
                Marker interface for an QueryCommand that was created due the invoke of a Factory mehtod
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryFactoryResult.Query">
            <summary>
                The SQL QueryCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Contacts.IQueryFactoryResult.Parameters">
            <summary>
                Sql QueryCommand Parameter
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbConfigHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfigHelper.IsAnonymousType(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache)">
            <summary>
                Anonymous type check by naming convention
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfigHelper.GetClassInfo(System.Type)">
            <summary>
                Get the ClassInfoCache object for the type
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.ClassInfoCache">
            <summary>
                Easy access to the known Class Info
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPropertyAttribute``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                Set a attribute on a property
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPropertyAttribute(System.String,JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                Set a attribute on a property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetMethodAttribute``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a method
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetMethodAttribute(System.String,JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod(System.String,System.Func{System.Object,System.Object[],System.Object},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod``2(System.String,System.Action{``0,``1},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateMethod``2(System.String,System.Func{``0,``1},JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache[])">
            <summary>
                Adds a Fake Mehtod to the class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.CreateProperty``1(System.String,System.Action{`0,``0},System.Func{`0,``0},JPB.DataAccess.MetaApi.Model.AttributeInfoCache[])">
            <summary>
                Adds a Fake property to the class getter and setter will be invoked like normal ones
            </summary>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetClassAttribute(JPB.DataAccess.ModelsAnotations.DataAccessAttribute)">
            <summary>
                set a Attribute on a class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetFactory(System.Func{System.Data.IDataRecord,System.Object},System.Boolean)">
            <summary>
                Set a Mehtod for creating an instance. When FullLoad is true the Framework assumes that the Factory has loaded all
                infos from the IDataRecord into the new Object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetConverter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Type)">
            <summary>
                Set a converter type that allows you to convert incomming and outgoing data to be converted befor set to the
                property
            </summary>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetPrimaryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set the Primary key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetForginKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Forgin key on a Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetForModelKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
                Set a ForModelAttribute key on a Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetDeleteFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a delete factory mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetObjectFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Object factory mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetSelectFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Select method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetInsertFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Insert mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetUpdateFactoryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Set a Update mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.ConfigurationResolver`1.SetTableNameKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
                Set the Table Name ForModelAttribute key
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbConfig.ConstructorSettings">
            <summary>
                The settings that are used to create a DOM ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.SetConfig``1(System.Action{JPB.DataAccess.DbInfoConfig.ConfigurationResolver{``0}})">
            <summary>
                Allows you to alter the MetaInfoStore store that holds <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Include``1">
            <summary>
                Append
                <typeparamref name="T" />
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbConfig.Include(System.Type)">
            <summary>
                Append
                <typeparamref name="T" />
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodArgument">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodArgument.DeclaringMethod">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache.#ctor(System.Attribute)">
            <summary>
            
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1">
            <summary>
            Attributes with Database spezifc members
            </summary>
            <typeparam name="TAttr"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.#ctor(JPB.DataAccess.MetaApi.Model.AttributeInfoCache)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.Attribute">
            <summary>
            Strongly typed Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbAttributeInfoCache`1.WrapperOrNull(JPB.DataAccess.MetaApi.Model.AttributeInfoCache)">
            <summary>
            Wraps and Attribute into an strong typed DbAttribute
            </summary>
            <param name="firstOrDefault"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache">
            <summary>
                for internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Init(System.Type,System.Boolean)">
            <summary>
            For interal use Only
            </summary>
            <param name="type"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Factory">
            <summary>
                If enumerated a method that creats an Instance and then fills all propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.FullFactory">
            <summary>
                Internal Use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.ForModel">
            <summary>
                If known the ForModelAttribute attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.SelectFactory">
            <summary>
                If known the SelectFactory Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.MethodProxyAttribute">
            <summary>
            	If knwon the MethodProxyAttribute Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.SchemaMappingValues">
            <summary>
                Key is C# Property name and Value is DB Eqivalent
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.TableName">
            <summary>
            	Easy access to the SQL Table name
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.HasRelations">
            <summary>
                Internal use Only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.RowVersionProperty">
            <summary>
            	If known the Property with an RowVersion Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.PrimaryKeyProperty">
            <summary>
            	If knwon the Property with an PrimaryKey Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache.Refresh(System.Boolean)">
            <summary>
                When alternating the Configuration you have to call this method to renew the property enumerations.
                This also happens after the usage of the config attribute
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache">
            <summary>
                Infos about the Ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbConstructorInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache">
            <summary>
                Infos about the Method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbMethodInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Method
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache">
            <summary>
                Infos about the Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.DeclaringClass">
            <summary>
            	The class that owns this Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForModelAttribute">
            <summary>
                if known the ForModelAttribute attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.FromXmlAttribute">
            <summary>
                if known the ForXml attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForginKeyDeclarationAttribute">
            <summary>
                if known the ForXml attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.InsertIgnore">
            <summary>
                Should this property not be inserterd
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.ForginKeyAttribute">
            <summary>
                if known the ForginKey attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.DbName">
            <summary>
                Returns the For Model name if known or the Propertyname
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.RowVersionAttribute">
            <summary>
            	if known the RowVersion Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.PrimaryKeyAttribute">
            <summary>
            	if knwon the PrimaryKey Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.IgnoreAnyAttribute">
            <summary>
            	if knwon the Ignore Reflection Attribute
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache.Refresh">
            <summary>
                For internal Usage only
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.FactoryHelper">
            <summary>
                Only for internal use
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.EnforcePublicPropertys">
            <summary>
                Check and throw exception if not all propertys can be accessed by the Super class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.EnforceCreation">
            <summary>
                If any error is thrown so throw exception
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.HideSuperCreation">
            <summary>
                Shame on me.
                To set all propertys from the outside ill create a super class that inherts from the POCO .
                to get rid of this super class you can set this property to true then the superclass will be cased into its
                baseclass.
                If set to true the factory will cast the object to its base class and hide the super creation
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.CreateDebugCode">
            <summary>
                Include PDB debug infos. Deactivate this during tests beacuse it can cause problems.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.ReuseFactorys">
            <summary>
            When a Factory is create inside an dll the factory can be reused. Deactivate this during tests beacuse it can cause problems.
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbInfoConfig.FactoryHelperSettings.DefaultNamespaces">
            <summary>
            A Collection that includes all Namespaces that are used by default to create new Factorys
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.DatabaseScope">
            <summary>
            Provides a logical scope for defining databases. All DbCollections within this scope are logicly combined. 
            Use the Using keyword to ensure correctness
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.DatabaseScope.#ctor">
            <summary>
            Creates a new Database
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.DatabaseScope.SetupDone">
            <summary>
            Will be invoked if dispose is called
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbManager.Scope">
            <summary>
            Access to the current local Scope
            Not ThreadSave
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Helper.LocalDb.LocalDbManager.SetupDone">
            <summary>
            Will be invoked when the current database is setup
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory">
            <summary>
            Maintains a local collection of entitys simulating a basic DB Bevavior by setting PrimaryKeys in an General way. Starting with 0 incriment by 1
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.#ctor(System.Type,JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider,JPB.DataAccess.Contacts.ILocalDbConstraint[])">
            <summary>
            Creates a new Instance that is bound to <paramref name="type"/> and uses <paramref name="keyGenerator"/> for generation of PrimaryKeys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.ReposetoryCreated">
            <summary>
            Returns an value that indicates a proper DatabaseScope usage. 
            If true the creation was successfull and all tables for the this table are mapped
            The Reposetory cannot operate if the reposetory is not created!
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.#ctor(System.Type)">
            <summary>
            Creates a new, only local Reposetory by using one of the Predefined KeyGenerators
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.#ctor(JPB.DataAccess.Manager.DbAccessLayer,System.Type)">
            <summary>
            Creates a new, database as fallback using batabase
            </summary>
            <param name="db"></param>
            <param name="type"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.Add(System.Object)">
            <summary>
            Adds a new Item to the Table
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.Clear">
            <summary>
            Removes all items from this Table
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.Contains(System.Int64)">
            <summary>
            Checks if the given primarykey is taken
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.Contains(System.Int32)">
            <summary>
            Checks if the given primarykey is taken
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.Item(System.Object)">
            <summary>
            Returns an object with the given Primarykey
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.ToArray">
            <summary>
            Thread save
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory.CopyTo(System.Array,System.Int32)">
            <summary>
            Thread save
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1">
            <summary>
            Provides an wrapper for the non Generic LocalDbReposetory 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.#ctor(JPB.DataAccess.Contacts.ILocalDbConstraint[])">
            <summary>
            Creates a new LocalDB Repro by using <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Creates a new LocalDB Repro by using <typeparamref name="T"/> that uses the DbAccessLayer as fallback if the requested item was not found localy
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.#ctor(JPB.DataAccess.Contacts.ILocalPrimaryKeyValueProvider,JPB.DataAccess.Contacts.ILocalDbConstraint[])">
            <summary>
            Creates a new LocalDB Repro by using <typeparamref name="T"/> and uses the KeyProvider to generate Primarykeys
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Add(`0)">
            <summary>
            Adds a new Item to the Table
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Clear">
            <summary>
            Removes all items from this Table
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Contains(`0)">
            <summary>
            Checks if the item is ether localy stored or on database
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Contains(System.Object)">
            <summary>
            Checks if the key is known
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.ToArray">
            <summary>
            Thread save
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copys the current collection the an Array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Remove(`0)">
            <summary>
            Removes the item from this collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Count">
            <summary>
            Returns the count of all knwon items
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.IsReadOnly">
            <summary>
            False
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.Item(System.Object)">
            <summary>
            Returns an object with the given Primarykey
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalDbReposetory`1.GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalGuidPkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalIntPkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.LocalDb.LocalIntPkProvider.#ctor">
            <summary>
            Default primary key generation starts with 1 incriments by 1
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.LocalDb.LocalLongPkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Helper.PocoPkComparer`1">
            <summary>
            Compares 2 Pocos based on there PrimaryKeys. Requires all Pocos to define one property with the PrimaryKey attribute
            When both of the instances are of the same reference: return true
            When one of the instances is default(T): return false
            When both of the instances Primary Key has the assertNotDatabaseMember: return false
            When both of the instances Primary Key are Equals: return true
            return false
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Helper.PocoPkComparer`1.Value">
            <summary>
            When Equals is used the result is stored in this Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.#ctor">
            <summary>
            New Instance of the Auto Equality Comparer with no assertion on its default value for an Primary key
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.Equals(`0,`0)">
            <summary>
            Checks if both have the same Reference.
            Checks if any but not both of them are null.
            Compares both Primary keys against the assertNotDatabaseMember Object
            Compares both Primary key Propertys by using Equals
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.GetHashCode(`0)">
            <summary>
            Calls the GetHashCode function on the PrimaryKey
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.PocoPkComparer`1.Compare(`0,`0)">
            <summary>
            Checks if both arguments are ReferenceEquals
            Checks if Left is null = 1
            Checks if Right is null = -1
            Calls the 
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Helper.QueryParameter">
            <summary>
                Example Implimentation of IQueryParameter
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Helper.QueryParameter.Render">
            <summary>
                Renders the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Helper.StringBuilderInterlaced.#ctor(System.Boolean,System.UInt32)">
            <summary>
            
            </summary>
            <param name="transformInterlaced">If true an level will be displaced as <paramref name="intedtSize"/> spaces</param>
            <param name="intedtSize">ammount of spaces for each level</param> 
        </member>
        <member name="T:JPB.DataAccess.Logger.DefaultLogger">
            <summary>
            The default logger that is used if no other is specified
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.AttributeInfoCache">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.#ctor(System.Attribute)">
            <summary>
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.Init(System.Attribute)">
            <summary>
            For Interal use Only
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.Attribute">
            <summary>
            The Instance of the current Attribute
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache.AttributeName">
            <summary>
            ToBeSupported
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.AttributeInfoCache`1">
            <summary>
            Easy access to the underlying Attribute by using generics
            </summary>
            <typeparam name="TAttr"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.AttributeInfoCache`1.Attribute">
            <summary>
            The Instance of the current Attribute
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5">
            <summary>
                for internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Init(System.Type,System.Boolean)">
            <summary>
            For interal use Only
            </summary>
            <param name="type"></param>
            <param name="anon"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.DefaultFactory">
            <summary>
            The default constructor that takes no arguments if known
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.ClassName">
            <summary>
                The .net ClassName
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Type">
            <summary>
                The .net Type instance
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Propertys">
            <summary>
                All Propertys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Attributes">
            <summary>
                All Attributes on class level
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Mehtods">
            <summary>
                All Mehtods
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ClassInfoCache`5.Constructors">
            <summary>
                All Constructors
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ConstructorStructFakeInfoCache">
            <summary>
            Fake Constructor for Structs
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorStructFakeInfoCache.#ctor(System.Func{System.Object},System.String)">
            <summary>
            Creates a new Constructor for an Struct
            </summary>
            <param name="del"></param>
            <param name="name"></param>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2">
            <summary>
                Infos about the Ctor
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.#ctor">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Invoke(System.Object[])">
            <summary>
            Invoke implimentation for Constructors. Calls the underlying Methodinfo without specifying an Caller
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Init(System.Reflection.MethodBase)">
            <summary>
            For internal use Only
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.MethodInfo">
            <summary>
            The method info casted as ConstructorInfo
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.ConstructorInfoCache`2.Init(System.Reflection.ConstructorInfo)">
            <summary>
            For Interal use Only
            </summary>
            <param name="ctorInfo"></param>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.Equatable.PropertyEquatableComparer`1">
            <summary>
            Defines methods for compareing two Property Cache instances on its Name and location
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1">
            <summary>
            Infos about Arguments delcared on a Mehtod
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.#ctor">
            <summary>
            For Internal use only
            </summary>	
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodArgsInfoCache`1.ParameterInfo">
            <summary>
            Direct reflection
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2">
            <summary>
                Infos about the Method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Init(System.Reflection.MethodBase)">
            <summary>
            For Internal use Only
            </summary>
            <param name="mehtodInfo"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Init(System.Reflection.MethodBase,System.Type)">
            <summary>
            
            </summary>
            <param name="mehtodInfo"></param>
            <param name="sourceType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Delegate">
            <summary>
                if set this method does not exist so we fake it
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.MethodInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.MethodName">
            <summary>
                The name of the method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Arguments">
            <summary>
            Arguments on this Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Attributes">
            <summary>
                All Attributes on this Method
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.MethodInfoCache`2.Invoke(System.Object,System.Object[])">
            <summary>
                Easy access to the underlying delegate
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1">
            <summary>
                Infos about the Property
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.#ctor">
            <summary>
            For internal use Only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.SetterDelegate">
            <summary>
                the type of the Setter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.GetterDelegate">
            <summary>
                the type of the Getter delegate
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Setter">
            <summary>
                The Setter mehtod can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Getter">
            <summary>
                The Getter Method can be null
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyType">
            <summary>
                The return type of the property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyInfo">
            <summary>
                Direct Reflection
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.PropertyName">
            <summary>
                The name of the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.Model.PropertyInfoCache`1.Attributes">
            <summary>
                All Attributes on this Property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.MetaInfoStore`6">
            <summary>
                Class info Storage. When this is a Global config store you should may never call the dispose method because it would erase all knwon types
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.IsGlobal">
            <summary>
            Is this instance mapped to the global Cache or does it only maintain its informations as long as it exists
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#ctor(System.Boolean)">
            <summary>
            Creates a new Instance for storing class informations. Allows you to define if this is ether the global config store or a local one
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#ctor">
            <summary>
            Creates a new Instance for accessing the Global Config store
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Clear">
            <summary>
                For Internal use Only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.SClassInfoCaches">
            <summary>
            Gloabel or local Cache
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.Type)">
            <summary>
                Gets an Cache object if exists or creats one
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.Type,System.Boolean@)">
            <summary>
                Gets an Cache object if exists or creats one
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateClassInfoCache(System.String,System.Boolean@)">
            <summary>
            	Gets an Cache object of exists or creats one
            	Return value can be null
            </summary>
            <param name="typeName"></param>
            <param name="newCreated"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.GetOrCreateMethodInfoCache(System.Reflection.MethodInfo)">
            <summary>
                Gets an Cache object if exists or creats one
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include``1">
            <summary>
                Append
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include(System.Type)">
            <summary>
                Append
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStore`6.Include(`0)">
            <summary>
                Append
                as an Optimistic input to the store.
                This allows you to explicit control when the MetaInfoStore store will enumerate the type object.
                This will be implicit called when GetOrCreateClassInfoCache is called and the type is not known
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.EnableGlobalThreadSafety">
            <summary>
                If Enabled the GetOrCreateClassInfoCache mehtod will be locked due usage
            </summary>
        </member>
        <member name="P:JPB.DataAccess.MetaApi.MetaInfoStore`6.EnableInstanceThreadSafety">
            <summary>
            	if Enabled this can overwrite the EnableGlobalThreadSafety property
            </summary>
        </member>
        <member name="T:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions">
            <summary>
            Extention methods for easy access to meta infos
            </summary>
        </member>
        <member name="M:JPB.DataAccess.MetaApi.MetaInfoStoreExtentions.IsAnonymousType(System.Type)">
            <summary>
                Anonymous type check by naming convention
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DataConverterExtensions">
            <summary>
                Helper Extentions for Maintaining Value
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CreateQueryDebuggerAuto(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CreateQueryDebugger(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetDataValue(System.Object)">
            <summary>
                Gets the Value or DB null
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetParamaterValue(System.Object,System.String)">
            <summary>
                Gets the Value from a Paramter with Conversion if Nessesary
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetParamater(System.Object,System.String)">
            <summary>
                retuns the Cashed Property info from Refection Cash
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetPK(System.Type)">
            <summary>
                Get and Convert the found PK name into Database name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFKs(System.Type)">
            <summary>
                Returns All forgin keys of the given type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFK(System.Type,System.Type)">
            <summary>
                Gets the first Forgin key that is of type <paramref name="fkType" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetFK(System.Type,System.String)">
            <summary>
                Get the forgin key based that contains the
                <paramref name="databaseName" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetPK``1(``0)">
            <summary>
                Gets the Primary key of
                <typeparamref name="T"></typeparamref>
                and convert it the
                <typeparamref name="E"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(System.Reflection.PropertyInfo)">
            <summary>
                Checks the info declaring type to be an List
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache)">
            <summary>
                Checks the info declaring type to be an List
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CheckForListInterface(System.Object)">
            <summary>
                Checks the object instance to be an List
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetNavigationProps(System.Type)">
            <summary>
                returns all propertys that are marked as Forgin keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetNavigationProps``1">
            <summary>
                returns all propertys that are marked as Forgin keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.CreateEgarRecord(System.Data.IDataRecord)">
            <summary>
                Factory
                Will enumerate the
                <paramref name="rec" />
                and wrapps all infos into a Egar record
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DataConverterExtensions.GetPropertysViaRefection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
                Returns all Cached Propertys from a <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbAccessLayerHelper">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.MergeCommands(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Not Connection save
                Must be executed inside a Valid Connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateDbCollection``1(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Creates a DbCollection for the specifiy type
                To Limit the output create a new Type and then define the statement
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.AsQueryParameter(System.Data.IDataParameterCollection)">
            <summary>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.Type,System.String,System.String[],System.Object)">
            <summary>
                Wraps a
                <paramref name="query" />
                on a given
                <paramref name="type" />
                by including
                <paramref name="entry" />
                's
                propertys that are defined in
                <paramref name="propertyInfos" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommand(System.String,JPB.DataAccess.Contacts.IDatabase,System.Object)">
            <summary>
                Wrappes a String into a Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues``1(JPB.DataAccess.Contacts.IDatabase,System.String,System.String[],``0)">
            <summary>
                Wraps a
                <paramref name="query" />
                on a given typeof(T) by including
                <paramref name="entry" />
                's
                propertys that are defined in
                <paramref name="propertyInfos" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.String,System.Tuple{System.Type,System.Object}[])">
            <summary>
                Wraps
                <paramref name="query" />
                into a Command and adds the values
                values are added by Index
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommandWithParameterValues(JPB.DataAccess.Contacts.IDatabase,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Wraps
                <paramref name="query" />
                into a Command and adds the values
                values are added by Name of IQueryParamter
                If item of
                <paramref name="values" />
                contains a name that does not contains @ it will be added
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Boolean)">
            <summary>
                Returns all Propertys that can be loaded due reflection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv``1(System.Boolean)">
            <summary>
                Returns all Propertys that can be loaded due reflection
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
                Returns all Propertys that can be loaded due reflection and excludes all propertys in ignore
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyCsv``1(System.String[])">
            <summary>
                Returns all Propertys that can be loaded due reflection and excludes all propertys in ignore
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.FilterDbSchemaMapping(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.String[])">
            <summary>
                Maps all propertys of
                <paramref name="type" />
                into the Database columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.FilterDbSchemaMapping``1(System.String[])">
            <summary>
                Maps all propertys of typeof(T) into the Database columns
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyNames(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Boolean)">
            <summary>
                Maps propertys to database of given type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreatePropertyNames``1(System.Boolean)">
            <summary>
                Maps propertys to database of given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.CreateCommand(JPB.DataAccess.Contacts.IDatabase,System.String)">
            <summary>
                Wraps a Parameterless string into a Command for the given DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.ExecuteGenericCommand(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Execute a QueryCommand on a given Database
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.ConcatCommands(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Not Connection save
                Must be executed inside a Valid Connection
                Takes <paramref name="base" /> as base of Connection propertys
                Merges the Command text of Both commands sepperated by a space
                Creats a new command based on
                <paramref name="db" />
                and Adds the Merged Commandtext and all parameter to it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.InsertCommands(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Not Connection save
                Must be executed inside a Valid Connection
                Takes <paramref name="base" /> as base of Connection propertys
                Merges the Command text of Both commands sepperated by a space
                Creats a new command based on
                <paramref name="db" />
                and Adds the Merged Commandtext and all parameter to it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord)">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbAccessLayerHelper.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.NonObservableDbCollection`1">
            <summary>
                For internal use only
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.NonObservableDbCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.DbCollection`1">
            <summary>
                WIP Observes the local collection and allows a Generic save update remove and insert
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Internal use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DbCollection.DbCollection`1.Item(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.GetEntryState(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.DbCollection.DbCollection`1.SaveChanges(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Sync the Changes to this Collection to the Database
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbCollection.CollectionStates">
            <summary>
            All states that an item inside an DbCollection can be
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Unknown">
            <summary>
            Element request is not in store
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Unchanged">
            <summary>
            Object was created from the Database and has not changed
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Added">
            <summary>
            Object from UserCode
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Changed">
            <summary>
            Object was created from the database and has changed since then
            </summary>
        </member>
        <member name="F:JPB.DataAccess.DbCollection.CollectionStates.Removed">
            <summary>
            Object was created from the database and should be created
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DbEventArgs.DatabaseActionEvent">
            <summary>
            Wraps an Event raised by the DbAccessLayer
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DbEventArgs.DatabaseActionEvent.#ctor(JPB.DataAccess.DebuggerHelper.QueryDebugger)">
            <summary>
            
            </summary>
            <param name="queryDebugger"></param>
        </member>
        <member name="P:JPB.DataAccess.DbEventArgs.DatabaseActionEvent.QueryDebugger">
            <summary>
            If enabled the QueryDebugger that contains the QueryCommand
            </summary>
        </member>
        <member name="T:JPB.DataAccess.DebuggerHelper.QueryDebugger">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DebuggerHelper.QueryDebugger.#ctor(System.Data.IDbCommand,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Debugger that contains some debugging data
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.UseDefaultDatabase">
            <summary>
                When set to true the QueryCommand debugger creates an own instance the the Default database connection assumd by the type
                of the IDbCommand it contains
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.DebuggerQuery">
            <summary>
                Stores the exact executed query
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.SqlQuery">
            <summary>
                Provieds a Instant to use SQL query that Contains all Variables and querys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.DebuggerHelper.QueryDebugger.StackTracer">
            <summary>
                Blocking if Stack Trace is not created
            </summary>
        </member>
        <member name="M:JPB.DataAccess.DebuggerHelper.QueryDebugger.ParameterValue(System.Data.IDataParameter)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Manager.DbAccessLayer">
            <summary>
                Contanins some Helper mehtods for CRUD operation
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer.DefaultAssertionObject">
            <summary>
            Object that is used globaly for each Equallity Comparsion if no other is specifyed ether for the type or the instance. This field overrides 
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DefaultAssertionObjectRewrite">
            <summary>
            When specifying an Long as DefaultAssertionObject the PocoPkComparer will use instedt the value casted as int when the property is int instedt of Long and vice versa (more Rewrite operations may follow)
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Debugger">
            <summary>
                Enables the automatic creation of QueryDebugger objects on each created IDbCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.IsMultiProviderEnvironment">
            <summary>
            	If set to True a strict check for the Targetdatabase Property on each Factory or provider specific method is done otherwise this Check is skiped 
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DatabaseStrategy">
            <summary>
                For Internal Use only
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DbAccessType">
            <summary>
                Selected dbAccessType
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.DefaultLookupPath">
            <summary>
            The default path for loading external Providers via DbAccessType
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Database">
            <summary>
                Current Database
                Can be used to write multi statements
                Is used for ALL NonStatic statments creators
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.ProviderCollection">
            <summary>
                Defines a set of Providers that are inclueded in this DLL or are weak refernced.
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Manager.DbAccessType,System.String,JPB.DataAccess.Contacts.ILogger)">
            <summary>
                Create a DbAccessLayer that uses a Predefined type and Connection string
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(System.String,System.String,JPB.DataAccess.Contacts.ILogger)">
            <summary>
                Create a DbAccessLAyer with exernal Strategy
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Contacts.IDatabaseStrategy,JPB.DataAccess.Contacts.ILogger)">
            <summary>
                Create a DbAccessLayer with a new Database
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.#ctor(JPB.DataAccess.Contacts.IDatabase,JPB.DataAccess.Contacts.ILogger)">
            <summary>
                Creates a DbAccessLayer with a new Database
                dbAccessType will be Guessed
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CheckDatabase">
            <summary>
                Check for Availability
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Wraps a QueryCommand and its Paramters and then executes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.String,System.Object)">
            <summary>
                Wraps a QueryCommand and its Paramters from Dynamic and then executes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteGenericCommand(System.Data.IDbCommand)">
            <summary>
                Execute a QueryCommand and without Paramters
            </summary>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.LoadCompleteResultBeforeMapping">
            <summary>
                if set the created reader of an read operation will be completely stored then the open connection will be closed
                Default is true
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Query">
            <summary>
                Creates a Strong typed query that awaits a Result
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Query(System.Type)">
            <summary>
                Creates a Strong typed query that awaits a Result
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Query``1">
            <summary>
                Creates a Strong typed query that awaits a Result
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord)">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SetPropertysViaReflection(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Collections.Generic.Dictionary{System.Int32,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache})">
            <summary>
                Creates a new Instance based on possible Ctor's and the given
                <paramref name="reader" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInstance(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Boolean@,System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Creates an instance based on a Ctor injection or Reflection loading
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ReflectionPropertySet(System.Object,JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Data.IDataRecord,System.Collections.Generic.Dictionary{System.Int32,JPB.DataAccess.DbInfoConfig.DbInfo.DbPropertyInfoCache},System.Nullable{JPB.DataAccess.Manager.DbAccessType})">
            <summary>
                Loads all propertys from a DataReader into the given Object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Delete``1(``0)">
            <summary>
                Creates and Executes a Standart SQL delete statement based on the Entry
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Delete``1(``0,JPB.DataAccess.Contacts.IDatabase,System.Object[])">
            <summary>
                Creates and Executes a Standart SQL delete statement based on the Entry
                uses factory Mehtod if availbile
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RaiseEvents">
            <summary>
                Should raise Instance bound Events
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RaiseStaticEvents">
            <summary>
                Should raise non Instance bound Events
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnDelete">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Delete Statement.
                Will only be triggerd when setting RaiseStaticEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnSelect">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Select Statement.
                Will only be triggerd when setting RaiseStaticEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnUpdate">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Update Statement.
                Will only be triggerd when setting RaiseStaticEvents to true
            </summary>
        </member>
        <member name="E:JPB.DataAccess.Manager.DbAccessLayer.OnInsert">
            <summary>
                Will be triggerd when any DbAccessLayer tries to handle a Insert Statement.
                Will only be triggerd when setting RaiseStaticEvents to true
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer.DbTypeMap">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Map(System.Data.DbType)">
            <summary>
            Map an SourceDbType to the proper C# mscore lib type
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Map(System.Type)">
            <summary>
            Map an C# mscore lib type to the proper SourceDbType
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SProcedureDbAccessLayer">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedureNonResult``1(``0)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedureNonResult(System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedure``2(``0)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TE">The result</typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedure(System.Type,System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteProcedurePrimetiv(System.Type,System.Type,System.Object)">
            <summary>
                Executes a Procedure object into the Database
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.RangerInsertPation">
            <summary>
                get the size of the Partition of the singel InsertStatements
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert(System.Type,System.Object)">
            <summary>
                Insert a
                <paramref name="entry" />
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert``1(``0)">
            <summary>
                Insert a
                <paramref name="entry" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertWithSelect``1(``0)">
            <summary>
                Insert a
                <paramref name="entry" />
                ,then selectes this entry based on the last inserted ID and creates a new model
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates AutoStatements in the size of RangerInsertPation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsertRangeCommand``1(``0[],JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates the Multi Insert statement based on the Ranger property
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer._CreateInsert(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,System.Object,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a single Insert Statement with the propertys of
                <paramref name="entry" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsert(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase,System.Object[])">
            <summary>
                Creates a single insert statement for a
                <paramref name="entry" />
                uses
                <paramref name="parameter" />
                if possible
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Insert(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateInsertWithSelectCommand(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates an insert command with appended LastInsertedIDCommand from the IDatabase interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertWithSelect(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.InsertWithSelect``1(``0,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                Creates and Executes a Insert statement for a given
                <paramref name="entry" />
                and selectes that
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.ProcessNavigationPropertys">
            <summary>
                If enabled Related structures will be loaded into the source object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object)">
            <summary>
                Execute select on a database with a standard Where [Primary Key] = <paramref name="pk" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                Selectes a Entry by its PrimaryKey
                Needs to define a PrimaryKey attribute inside
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,System.Object[])">
            <summary>
                Creates and Executes a Plain select over a
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(System.Object[])">
            <summary>
                Uses a Factory method to Generate a new set of T
                When no Factory is found an Reflection based Factory is used
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Boolean,System.Object[])">
            <summary>
                Creates and Executes a SelectStatement for a given
                <paramref name="type" />
                by using the
                <paramref name="parameter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                Creates a selectStatement for a given
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Creates and Executes a Select Statement for a given
                <paramref name="type" />
                by using
                <paramref name="command" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Select``1(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Creates and Executes a Select Statement for
                <typeparam name="T"></typeparam>
                by using
                <paramref name="command" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.String)">
            <summary>
                Creates a Select with appended query
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(System.String)">
            <summary>
                Creates a Select with appended query
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Creates a Select with appended query and inclueded QueryCommand Paramater
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Creates a Select with appended query and inclueded QueryCommand Paramater
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Manager.DbAccessLayer.Multipath">
            <summary>
            Activates Deadlock and Stackoverflow detection and Prevention
            When an Stackoverflow inside an SelectFactoryMethod is detected an other method for creating the selectstatement is used as long as there are other options
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessLayer._isIndented">
            <summary>
            For StackOverflow detection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,System.Object)">
            <summary>
                Creates a Select for one Item with appended query and inclueded QueryCommand Paramater
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(JPB.DataAccess.Contacts.IDatabase,System.Object)">
            <summary>
                Creates a Select for one Item with appended query and inclueded QueryCommand Paramater
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type)">
            <summary>
                Creates a Plain Select statement by using
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache)">
            <summary>
                Creates a Plain Select statement by using
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect``1(JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(System.Type,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateSelect(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer._CreateSelect(JPB.DataAccess.DbInfoConfig.DbInfo.DbClassInfoCache,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Creates a Select by using a Factory mehtod or auto generated querys
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunDynamicSelect(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect``1(JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Executes a Selectstatement and Parse the Output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect(System.Type,JPB.DataAccess.Contacts.IDatabase,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter},System.Boolean)">
            <summary>
                Executes
                <paramref name="query" />
                and Parse the Output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunSelect``1(JPB.DataAccess.Contacts.IDatabase,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter},System.Boolean)">
            <summary>
                Executes
                <paramref name="query" />
                and Parse the Output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere(System.Type,System.String,System.Object)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses
                <paramref name="paramenter" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectWhere``1(System.String,System.Object)">
            <summary>
                Executes a Select Statement and adds
                <paramref name="where" />
                uses<paramref name="paramenter" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.Data.IDbCommand)">
            <summary>
                Runs
                <paramref name="command" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect(System.Type,System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RunPrimetivSelect``1(System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses the first line of output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean,System.Boolean)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.LoadNavigationProps``1(``0,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                ToBeSupported
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.LoadNavigationProps(System.Object,JPB.DataAccess.Contacts.IDatabase,System.Boolean)">
            <summary>
                ToBeSupported
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,JPB.DataAccess.Contacts.IDatabase,System.Data.IDbCommand,System.Boolean)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.Data.IDbCommand)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative(System.Type,System.Data.IDbCommand,System.Object)">
            <summary>
                Runs
                <paramref name="command" />
                and parses output into
                <paramref name="type" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.SelectNative``1(System.String,System.Object)">
            <summary>
                Runs
                <paramref name="query" />
                and parses output into
                <typeparamref name="T"></typeparamref>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ExecuteMARS(System.Data.IDbCommand,System.Type[])">
            <summary>
                Executes a IDbCommand that will return multibe result sets that will be parsed to the marsTypes in order they are
                provided
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Update``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Will update by using the CreateUpdate function
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Update``1(``0,System.Boolean)">
            <summary>
                Will Update by using the CreateUpdate function
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.Refresh``1(``0)">
            <summary>
                Will create a new Object when
                T contains a Valid RowVersionAttribute property
                AND
                RowVersionAttribute property is not equals the DB version
                OR
                T does not contain any RowVersionAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.RefreshKeepObject``1(``0)">
            <summary>
                Will update all propertys of entry when
                T contains a Valid RowVersionAttribute property
                AND
                RowVersionAttribute property is not equals the DB version
                OR
                T does not contain any RowVersionAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CheckRowVersion``1(``0)">
            <summary>
                Checks the Row version of the local entry and the server on
            </summary>
            <typeparam name="T"></typeparam>
            <returns>True when the version is Equals, otherwise false</returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.CreateUpdate``1(``0,JPB.DataAccess.Contacts.IDatabase)">
            <summary>
                Will create an Update Statement by using a Factory or Autogenerated statements
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ValidateEntity(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.ValidateEntityPk(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:JPB.DataAccess.Manager.DbAccessLayer.TryValidateEntity(System.Object)">
            <summary>
                Validates a Entity
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:JPB.DataAccess.Manager.DatabaseActionHandler">
            <summary>
                A database operation is done
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.DatabaseFailedActionHandler">
            <summary>
                A database operation is done
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.DbAccessType">
            <summary>
                Defines a Common set of DBTypes
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Experimental">
            <summary>
                For Developing
                Not itend for your use!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Unknown">
            <summary>
                default and undefined bevhaior
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.MsSql">
            <summary>
                Defines the MsSQL Type as a Target database
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.MySql">
            <summary>
                Defines the MySQL Type as a Target database
                Not as tested as the MsSQL type
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.OleDb">
            <summary>
                Defines the MsSQL Type as a Target database
                Not tested!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.Obdc">
            <summary>
                Defines the MsSQL Type as a Target database
                Not Tested!
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Manager.DbAccessType.SqLite">
            <summary>
                Defines the MsSQL Type as a Target database
                Not Tested
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Manager.PreDefinedProviderCollection">
            <summary>
                A list that contains all kown Provider and there Basic implimentation
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.Contracts.IQueryBuilder`1">
            <summary>
            Provides access to the interal query storage and enumeration Function
            </summary>
            <typeparam name="Stack"></typeparam>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ContainerObject">
            <summary>
            The interal value holder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ForResult``1">
            <summary>
            Enumerates the current query for a type <typeparamref name="E"/>
            </summary>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryBuilder`1.ChangeType``1">
            <summary>
            Wraps this query type to an new QueryElement
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.ForType">
            <summary>
            	Declares the Return type that is awaited
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AutoParameterCounter">
            <summary>
            	Gets the current number of used SQL Arguments
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.Parts">
            <summary>
            	Defines all elements added by the Add Method
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.EnumerationMode">
            <summary>
                Defines the Way how the Data will be loaded
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AllowParamterRenaming">
            <summary>
                If enabled Variables that are only used for parameters will be Renamed if there Existing multiple times
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.Contracts.IQueryContainer.AccessLayer">
            <summary>
            	Access to the underlying AccessLayer
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.Compile">
            <summary>
                Will concat all QueryParts into a statement and will check for Spaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.GetNextParameterId">
            <summary>
                Increment the counter +1 and return the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.Contracts.IQueryContainer.CompileFlat">
            <summary>
                Compiles the QueryCommand into a String|IEnumerable of Paramameter
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.CteQueryPart">
            <summary>
                Maker for CTS in MSSQL
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.CteQueryPart.#ctor(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
            </summary>
            <param name="prefix"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:JPB.DataAccess.Query.CteQueryPart.#ctor(System.String)">
            <summary>
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="T:JPB.DataAccess.Query.EnumerationMode">
            <summary>
                Enum for specifying the way in enumeration that is used by enumerating a IQueryContainer
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.EnumerationMode.FullOnLoad">
            <summary>
                At the first call of GetEnumerator all items will be enumerated and stored
                Eager loading
            </summary>
        </member>
        <member name="F:JPB.DataAccess.Query.EnumerationMode.OnCall">
            <summary>
                Will bypass the current Complete loading logic and forces the DbAccessLayer to use a
                Lazy loading
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AccessLayer">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.ForType">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.#ctor(JPB.DataAccess.Manager.DbAccessLayer,System.Type)">
            <summary>
                Creates a new Instance of an QueryCommand Builder that creates Database aware querys
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Creates a new Instance of an QueryText Builder that creates Database aware querys
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.InternalContainerContainer.AutoLinebreak">
            <summary>
                If enabled the IQueryContainer will insert linebreaks after some Commands
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Execute">
            <summary>
                Executes a query without result parsing
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.WithEnumerationMode(JPB.DataAccess.Query.EnumerationMode)">
            <summary>
                QueryCommand like setter for WithEnumerationMode
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.WithParamterRenaming(System.Boolean)">
            <summary>
                QueryCommand like setter for AllowParamterRenaming [Duplicate]
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.SetAutoRenaming(System.Boolean)">
            <summary>
                QueryCommand like setter for AllowParamterRenaming
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.InternalContainerContainer.Render">
            <summary>
                Renders the Current Object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryBuilder`1">
            <summary>
                Provides functions that can build SQL Querys
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
            Creates a new Query
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.ChangeType``1">
            <summary>
            Wraps the current QueryBuilder into a new Form by setting the Current query type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.ForResult``1">
            <summary>
                Executes the Current QueryBuilder by setting the type
            </summary>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.ForResult">
            <summary>
            	Executes the current QueryBuilder
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`1.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryBuilder`2">
            <summary>
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`2.#ctor(JPB.DataAccess.Manager.DbAccessLayer)">
            <summary>
                Creates a new Instance of an QueryCommand Builder that creates Database aware querys
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`2.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilder`2.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.MsQueryBuilderExtentions">
            <summary>
                Provieds A set of extentions for Microsoft SQL Serve
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SetVariable(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.String,System.Object)">
            <summary>
            	Declares a new Variable of the Given SQL Type by using its length 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.DeclareVariable(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            	Declares a new Variable of the Given SQL Type by using its length 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.WithCteForType(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.Type,System.String,System.Boolean)">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.ForXml(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.ISelectQuery},System.Type)">
            <summary>
            Creates a FOR XML statement that uses the name of the given type to allow the .net XML Serilizer to read the output
            </summary>
            <param name="query"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.WithCte(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.String,System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}},System.Boolean)">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.LineBreak``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0})">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SubSelect``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}},System.Type)">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SelectStarFrom``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}})">
            <summary>
                Creates a QueryCommand that uses the * Operator to select all date from the inner query
            </summary>
            <param name="query"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SelectStar(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery})">
            <summary>
                Adds a select * from without a table name, to the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SelectStar(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.String)">
            <summary>
                Adds a select * from without a table name, to the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SelectStar(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.Type)">
            <summary>
                Adds a Select * from followed by the table name of the entity that is used in the <paramref name="type" />
            </summary>
            <param name="query"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Between(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery}})">
            <summary>
                Adds a Between statement followed by anything added from the action
            </summary>
            <param name="query"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Between(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery})">
            <summary>
                Adds a Between statement to the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Between(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}})">
            <summary>
                Adds a between statement followed by a query defined in <paramref name="valueA" /> folowed by an and statement and
                an secound query defined in the <paramref name="valueB" />
            </summary>
            <param name="query"></param>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Between(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.Double,System.Double)">
            <summary>
                Adds a static beween statement for the given 2 values
            </summary>
            <param name="query"></param>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.SubSelect(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.Type)">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.As``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String)">
            <summary>
                Append an AS part
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Contains(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.String)">
            <summary>
                Append an Contains part
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Contains(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.Object)">
            <summary>
                Append an Contains part
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.RowNumberOrder(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.ISelectQuery},System.String,System.Boolean)">
            <summary>
                Append an RowNumberOrder part
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IElementProducer},System.Type,System.Type)">
            <summary>
                Adds a LEFT JOIN to the Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IElementProducer},JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode,System.Type,System.Type)">
            <summary>
                Adds a JOIN to the Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IElementProducer},System.String,System.Type,System.Type)">
            <summary>
                Adds a JOIN to the Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Join``2(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IElementProducer},JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode)">
            <summary>
                Adds a JOIN to the Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.MsQueryBuilderExtentions.Top``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.UInt32)">
            <summary>
                Inserts a TOP statement
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.MsQueryBuilderExtentions.JoinMode.JoinType">
            <summary>
                QueryCommand string
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.MsQueryBuilderExtentions.ApplyMode.ApplyType">
            <summary>
                QueryCommand string
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Add``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},JPB.DataAccess.Query.GenericQueryPart)">
            <summary>
                Adds a QueryCommand part to the Local collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Add``2(JPB.DataAccess.Query.Contracts.IQueryBuilder{``1},JPB.DataAccess.Query.GenericQueryPart)">
            <summary>
                Adds a QueryCommand part to the Local collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryQ``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String,JPB.DataAccess.Contacts.IQueryParameter[])">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryD``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String,System.Object)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryD``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryCommand``2(JPB.DataAccess.Query.Contracts.IQueryBuilder{``1},System.Data.IDbCommand)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryCommand``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Data.IDbCommand)">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.QueryText``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String,System.Object[])">
            <summary>
                Adds a QueryCommand part to <paramref name="builder" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Select``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery})">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Select(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IRootQuery},System.Type)">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Select``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Type)">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Select``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0})">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Update``2(JPB.DataAccess.Query.Contracts.IQueryBuilder{``1},``0)">
            <summary>
                Adds a Update - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Update``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Type,System.Object)">
            <summary>
                Adds a Select - Statement
                Uses reflection or a Factory mehtod to create
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.InBracket``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Action{JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.INestedRoot}})">
            <summary>
                Creates a Common Table Expression that selects a Specific type
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.AsPager``1(JPB.DataAccess.Query.Contracts.IQueryContainer,System.Int32)">
            <summary>
                Wraps the Existing command into a DataPager for the underlying Database
                Accepts only Where statements
                <example>
                </example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.AsPagerViewModel``2(JPB.DataAccess.Query.Contracts.IQueryContainer,System.Int32)">
            <summary>
                Wraps the Existing command into a DataPager for the underlying Database
                Accepts only Where statements
                <example>
                </example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Where``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.String,System.Object)">
            <summary>
                Adds a SQL WHERE Condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.And(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.String,System.Object)">
            <summary>
                Adds And Condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.And(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery})">
            <summary>
                Adds And Condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.Or(JPB.DataAccess.Query.Contracts.IQueryBuilder{JPB.DataAccess.Query.Contracts.IConditionalQuery},System.String,System.Object)">
            <summary>
                Adds Or Condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryBuilderExtentions.WithParamerters``1(JPB.DataAccess.Query.Contracts.IQueryBuilder{``0},System.Object)">
            <summary>
                Adds Parameter to the QueryCommand object without adding a Statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.QueryEagerEnumerator.Load">
            <summary>
                Mehtod for async loading this will bring us some m secs
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.QueryLazyEnumerator">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.Query.GenericQueryPart">
            <summary>
                Wrapper for Generic QueryCommand parts
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.#ctor(System.String,System.Collections.Generic.IEnumerable{JPB.DataAccess.Contacts.IQueryParameter})">
            <summary>
                Creates a generic query part that can be used for any query
            </summary>
            <param name="prefix"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.#ctor(System.String)">
            <summary>
                Creates a generic query part that can be used for any query
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="P:JPB.DataAccess.Query.GenericQueryPart.Prefix">
            <summary>
                The Partial SQL QueryCommand that is contained inside this part
            </summary>
        </member>
        <member name="P:JPB.DataAccess.Query.GenericQueryPart.QueryParameters">
            <summary>
                If used the Parameters that are used for this Prefix
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.FromCommand(System.Data.IDbCommand)">
            <summary>
                Wrapps the given <paramref name="command" /> into a new QueryPart by storing its QueryCommand statement and parameter
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Render">
            <summary>
                For display
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.Render(JPB.DataAccess.Helper.StringBuilderInterlaced)">
            <summary>
                For display
            </summary>
            <returns></returns>
        </member>
        <member name="M:JPB.DataAccess.Query.GenericQueryPart.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.TJoinMode">
            <summary>
                Jon modes for TSQL. This is an helper method that can be used to create JOINs by using the QueryCommand Builder
            </summary>
        </member>
        <member name="M:JPB.DataAccess.Query.TJoinMode.GetJoins">
            <summary>
                Returns a list of all Join values known be the system
            </summary>
            <returns></returns>
        </member>
        <member name="T:JPB.DataAccess.Query.TApplyMode">
            <summary>
            	Apply modes for TSQL. This is an helper method that can be used to create APPLYs by using the QueryCommand Builder
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DataAccessAttribute">
            <summary>
                Base type for all maker Attributes
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DbAccessTypeAttribute">
            <summary>
            Defines an 
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.DbAccessTypeAttribute.TargetDatabase">
            <summary>
            Defines the Target database this Method creates an Script for
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute">
            <summary>
            	Sets an type to be associated with the current class.
            	TO BE SUPPORTED
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute.#ctor(System.Type)">
            <summary>
            Allows to create a proxy class that should contains Factory methods for the current class
            </summary>
            <param name="methodProxy"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.MethodProxyAttribute.MethodProxy">
            <summary>
            	The assocaiated type
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute">
            <summary>
                Marks this class to be allowed by the Framework for the CodeDOM Ado.net ctor creation
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.#ctor">
            <summary>
            Creates a new Instance without any Meta Infos
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.CtorGeneratorMode">
            <summary>
            Tells the framework how a factory for this class should be created
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorAttribute.FullSateliteImport">
            <summary>
            If set to true all Assemblys that are used inside the base Assembly will be imported to the new one
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode">
            <summary>
            Defines how an Constructor should be created
            </summary>
        </member>
        <member name="F:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode.Inhert">
            <summary>
            Use and inherted class and set Propertys in its super Constructor. A Proxy will be created
            </summary>
        </member>
        <member name="F:JPB.DataAccess.ModelsAnotations.CtorGeneratorMode.FactoryMethod">
            <summary>
            Should be used when the Constructor is private or class is sealed. No Proxy created
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorNamespaceAttribute">
            <summary>
            Adds a namespace to the generated class
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.AutoGenerateCtorNamespaceAttribute.#ctor(System.String)">
            <summary>
            Creates a new Attribute that is used for CodeGeneration
            This Attributes tell the factory to include certain namespaces.
            
            </summary>
            <param name="usedNamespace"></param>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ConfigMehtodAttribute">
            <summary>
                When a methode is marked with this attribute it can be used to configurate the current class. Must be public static
                void
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.DeleteFactoryMethodAttribute">
            <summary>
                Marks a Method as an Factory mehtod
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ObjectFactoryMethodAttribute">
            <summary>
                Marks a ctor or a Method as an Factory method
                The ctor must have only one param that is of type IDataRecord
                The Method must have only one param that is of type IDataRecord and returns a new Instance
                The Method must be static
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.SelectFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.InsertFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.UpdateFactoryMethodAttribute">
            <summary>
                Marks a mehtod as an Factory method
                The method must return a <code>string</code> or <code>IQueryFactoryResult</code>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute">
            <summary>
                Provieds a QueryCommand ( parametes not used ) for selection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.#ctor(System.String)">
            <summary>
                Ctor
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.Query">
            <summary>
                The Select QueryCommand that are used for selection of this Class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.SelectFactoryAttribute.Parameters">
            <summary>
                Not in USE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute">
            <summary>
                Provieds a QueryCommand ( parametes not used ) for selection
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.#ctor(System.String)">
            <summary>
                ctor
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.Query">
            <summary>
                The Select QueryCommand that are used for selection of this Class
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.StoredProcedureFactoryAttribute.Parameters">
            <summary>
                Not in USE
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.InsertIgnoreAttribute">
            <summary>
                Ignores this Property when creating an Update or Insert statement
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForeignKeyAttribute">
            <summary>
                Indicates this Property to be resolved by a ForeignKey column
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyAttribute.KeyName">
            <summary>
                The name of the Column that should be used
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute">
            <summary>
                Indicates this Property to be resolved as a ForeignKey column
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignKey">
            <summary>
            The Key on the Foreign table
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignTable">
            <summary>
            Table name of the Foreign constraint
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.ForeignType">
            <summary>
            The type of the table that is declared by ForginTable
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.#ctor(System.String,System.String)">
            <summary>
            Declares a new Foreign key constraint
            </summary>
            <param name="foreignKey"></param>
            <param name="foreignTable"></param>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForeignKeyDeclarationAttribute.#ctor(System.String,System.Type)">
            <summary>
            Declares a new Foreign key constraint
            </summary>
            <param name="foreignKey"></param>
            <param name="foreignTable"></param>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.PrimaryKeyAttribute">
            <summary>
                Indicates that this property is a Primary key
                Requert for Selection over PK
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ForModelAttribute">
            <summary>
                Allows renaming of the local class name to any name and the mapping from that name to the Db Table name
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ForModelAttribute.#ctor(System.String)">
            <summary>
                Creates a new Instance of ForModelAttribute
            </summary>
            <param name="alternatingName" />
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ForModelAttribute.AlternatingName">
            <summary>
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.RowVersionAttribute">
            <summary>
                A rowstate that is used to Detect a newer version
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.IgnoreReflectionAttribute">
            <summary>
                Marks a property to be ignored by the complete searching logic
                Experimental
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.LoadNotImplimentedDynamicAttribute">
            <summary>
                Marks the property that will be used to hold all non existing Columns
                Must be of Type <code>IDictionary string Object</code>
                Only for Automatik Loading
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute">
            <summary>
                Adds a Converter that is used to convert from an DB object to an C# object
                The Converter must inhert from
                ModelAnotations.IValueConverter
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.#ctor(System.Type)">
            <summary>
            </summary>
            <param name="converter" />
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.#ctor(System.Type,System.Object)">
            <summary>
            </summary>
            <param name="converter" />
            <param name="parameter" />
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.ValueConverterAttribute.Parameter">
            <summary>
                A static object that will be given to the Paramether
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.FromXmlAttribute">
            <summary>
                Marks a Property as XML Serilized
                If marked the output field from the query will be Serlized to the given object
            </summary>
        </member>
        <member name="M:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.FieldName">
            <summary>
                The name of the Field inside the result stream
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.LoadStrategy">
            <summary>
                Specifiys the Strategy that is used to load the Property
            </summary>
        </member>
        <member name="P:JPB.DataAccess.ModelsAnotations.FromXmlAttribute.LoadFromXmlStrategy">
            <summary>
                if set the type will be used to define a user logic for the Serialization process
            </summary>
        </member>
        <member name="T:JPB.DataAccess.ModelsAnotations.StoredProcedureAttribute">
            <summary>
                Marks a class as a StoredPrecedure wrapper
                if the marked class contains a Generic Arguement
                The result stream from the Select Statement will be parsed into the generic arguement
            </summary>
        </member>
        <member name="T:JPB.DataAccess.QueryFactory.QueryFactoryResult">
            <summary>
                Wraps a query and its Paramters into one single Object.
                Can be returned by an Factory on an POCO
            </summary>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(JPB.DataAccess.Query.Contracts.IQueryContainer)">
            <summary>
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(System.String)">
            <summary>
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:JPB.DataAccess.QueryFactory.QueryFactoryResult.#ctor(System.String,JPB.DataAccess.Contacts.IQueryParameter[])">
            <summary>
            </summary>
            <param name="query"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:JPB.DataAccess.QueryFactory.QueryFactoryResult.Query">
            <summary>
                The SQL QueryCommand
            </summary>
        </member>
        <member name="P:JPB.DataAccess.QueryFactory.QueryFactoryResult.Parameters">
            <summary>
                All used Parameters
            </summary>
        </member>
    </members>
</doc>
