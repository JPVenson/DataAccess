{{#VAR recordTypeName = "EagarDataRecord" |--}}
using JPB.DataAccess.EntityCollections;
using JPB.DataAccess.AdoWrapper;
{{#IF ClassInfo.GenerateConfigMethod |--}}
using JPB.DataAccess.DbInfoConfig;
{{--| /IF |--}}
{{#IF NotifyPropertysChanged |--}}
using System.ComponentModel;
using System.Runtime.CompilerServices;
{{/IF |--}}
{{#EACH ClassInfo.NamespaceImports AS ns |--}}
using {{ns}};
{{--| /EACH}}
{{--| #DECLARE RenderPropertyAssignment}}
	{{--| #LET DbName = prop.DbName ?? prop.Name}}
	{{--| #LET fReadOp = dataRecordParameterName + '["' + DbName + '"]'}}
	{{--| #IF targetName}}
	{{--| #LET fPropAssignOp = targetName + "." + prop.Name}}
	{{--| #ELSE}}	
	{{--| #LET fPropAssignOp = prop.Name}}
	{{--| /ELSE}}
	{{--| /IF}}
	{{--| #IF prop.IsXml}}
		{{--| #LET fReadOp = '(string)' + dataRecordParameterName + '["' + DbName + '"]'}}
		{{--| #IF prop.ValueConverterType}}
			{{--| #LET fReadOp = "new " + prop.ValueConverterType + "().Convert(" + fReadOp + ")"}}
		{{--| /IF}}
		{{--| #IF prop.Type.IsList}}
			{{--| #LET typeName = prop.Type.GenericTypes.First().Name}}
			{{--| fPropAssignOp}} = new NonObservableDbCollection<{{typeName}}>(XmlDataRecord.TryParse(
				xmlStream: {{&fReadOp}},
				target: typeof({{typeName}}),
				single: false)
			.CreateListOfItems()
			.Select(item => typeof({{typeName}}).GetClassInfo().SetPropertiesViaReflection(
				reader: EagerDataRecord.WithExcludedFields(item)
			)));
			{{--| #ELSE}}
			{{--| fPropAssignOp}} = XmlDataRecord.TryParse(
				xmlStream: {{&fReadOp}},
				target: typeof({{prop.Type.Name}}),
				single: true
			);
			{{--| /ELSE}}
		{{--| /IF}}

		{{--| #ELSEIF prop.ForeignKey}}
			{{--| #LET readerName = "readerOf" + prop.Name}}
			{{--| #IF prop.ForeignKey.DirectionFromParent |--}}
			{{--| #LET collectionType = Type.GenericTypes.First() |--}}
			var {{readerName}} = (({{recordTypeName}}[]){{&fReadOp}});
			if ({{readerName}} != null)
			{
				{{fPropAssignOp}} = new {{&Type.GetTypeName()}}({{readerName}}
				{{--| #IF ~ClassInfo.GenerateConstructor && ~!ClassInfo.GenerateFactory |--}}
					.Select(subReader => new {{&collectionType.GetTypeName()}}(subReader)));
				{{--| #ELSE |--}}
					.Select({{&collectionType.GetTypeName()}}.Factory));
				{{--| /ELSE |--}}
				{{--| /IF}}
			}

				{{-| #ELSE |--}}

			var {{readerName}} = (({{recordTypeName}}[]){{&fReadOp}});
			if ({{readerName}} != null)
			{
				{{fPropAssignOp}} = {{readerName}}
				{{--| #IF ~ClassInfo.GenerateConstructor && ~!ClassInfo.GenerateFactory |--}}
					.Select(subReader => new {{&Type.GetTypeName()}}(subReader))		
				{{--| #ELSE |--}}
					.Select({{&Type.GetTypeName()}}.Factory)
				{{--| /ELSE |--}}
				{{--| /IF |--}}	
					.First();
			}

				{{-| /ELSE}}
			{{--| /IF}}
		{{--| /ELSEIF}}
		{{--| #ELSE}}
			{{--| #IF prop.ValueConverterType}}
				{{--| #LET fReadOp = "new " + prop.ValueConverterType + "().Convert(" + fReadOp + ");"}}
			{{--| /IF}}
			{{--| fPropAssignOp}} = ({{&prop.Type.GetTypeName()}}){{&fReadOp}};
		{{--| /ELSE}}
	{{--| /IF}}
{{--| /DECLARE}}
{{--| #DECLARE PropertyDeclaration |--}}
{{#IF !~ClassInfo.GenerateConfigMethod}}
{{--| #EACH prop.Attributes AS attr}}
		[{{attr.Name}}({{#IMPORT 'RenderAttributeAssignments'}})]
{{/EACH}}
{{--| #ELSE}}
{{--| #EACH prop.Attributes.Where(e => !e.IsFrameworkAttribute()) AS attr}}
		[{{attr.Name}}({{#IMPORT 'RenderAttributeAssignments'}})]
{{/EACH}}
{{--| /ELSE}}
{{--| /IF |-}}
		public {{#IF prop.ForeignKey}}virtual {{/IF}}{{&prop.Type.GetTypeName()}} {{prop.Name}} { get; set; }
{{--| /DECLARE |--}}
{{--| #DECLARE RenderAttributeAssignments}}
{{--| #EACH ConstructorSetters AS ctorSet}}
{{--| &ctorSet.Key}}: {{&ctorSet.Value}}{{#IF !$last}}, {{/IF |--}}
{{--| /EACH}}
{{--| /DECLARE}}

namespace {{ClassInfo.Namespace}}
{
	//------------------------------------------------------------------------------
	// <auto-generated>
	// This code was generated by a tool.
	// Runtime Version:2.0.50727.42
	// Changes to this file may cause incorrect behavior and will be lost if
	// the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	{{#EACH ClassInfo.CompilerHeader AS hd |--}}
	//{{&hd}}
	{{--| /EACH}}
	public partial class {{ClassInfo.ClassName}}{{#IF ClassInfo.Inherts}}: {{ClassInfo.Inherts}}{{/IF}}
	{
		public {{ClassInfo.ClassName}}() {
		
		}
		{{--| #VAR dataRecordParameterName = "record" |--}}
		{{--| #IF ClassInfo.GenerateConstructor && !ClassInfo.GenerateFactory |--}}
		public {{ClassInfo.ClassName}}({{recordTypeName}} {{dataRecordParameterName}}) {
			{{#EACH ClassInfo.Properties AS prop}}
				{{#IMPORT "RenderPropertyAssignment" #WITH prop}}
			{{/EACH}}
		}
		{{--| /IF}}

		{{--| #IF !ClassInfo.IsSuperClass}}
		{{--| #EACH ClassInfo.Properties AS prop}}
{{#IMPORT "PropertyDeclaration" #WITH prop}}
		{{--| /EACH}}

		{{--| /IF}}
		{{--| #IF ClassInfo.GenerateFactory}}
		{{--| #IF !ClassInfo.GenerateConfigMethod}}
		[ObjectFactoryMethod()]
		{{--| /IF}}
		public static {{ClassInfo.ClassName}} Factory({{recordTypeName}} {{dataRecordParameterName}})
		{
			{{--| #VAR targetName = "super"}}
			{{ClassInfo.ClassName}} {{targetName}} = new {{ClassInfo.ClassName}}();
			{{--| #EACH ClassInfo.Properties AS prop}}
			{{#IMPORT "RenderPropertyAssignment" #WITH prop}}
			{{--| /EACH}}
			return super;
		}

		{{--| /IF}}
		{{--| #IF ClassInfo.GenerateConfigMethod}}
		static partial void BeforeConfig();
		static partial void AfterConfig();
		static partial void BeforeConfig(ConfigurationResolver<{{ClassInfo.ClassName}}> config);
		static partial void AfterConfig(ConfigurationResolver<{{ClassInfo.ClassName}}> config);	

		[ConfigMehtod()]
		public static void Configuration(ConfigurationResolver<{{ClassInfo.ClassName}}> config)
		{
			BeforeConfig();
			BeforeConfig(config);
			{{--| #IF ClassInfo.GenerateFactory}}
			config.SetFactory({{ClassInfo.ClassName}}.Factory, true);
			{{--| /IF}}
			{{--| #EACH ClassInfo.Attributes.Where(e => e.IsFrameworkAttribute()) AS attr}}
			config.SetClassAttribute(new {{attr.Name}}({{#IMPORT 'RenderAttributeAssignments' #WITH attr}}));
			{{--| /EACH}}

			{{--| #EACH ClassInfo.Properties.Where(e => e.Attributes.Any()) AS prop}}			
			{{--| #EACH prop.Attributes.Where(e => e.IsFrameworkAttribute()) AS attr}}
			config.SetPropertyAttribute(s => s.{{prop.Name}}, new {{attr.Name}}({{#IMPORT 'RenderAttributeAssignments' #WITH attr}}));
			{{--| /EACH}}
			{{--| /EACH}}
			AfterConfig(config);
			AfterConfig();
		}
		{{--| /IF}}
	}	
}
